// @ts-nocheck
/**
 * This file is automatically generated by the `@indirectus/cli` package.
 * Follow the package's instruction to update this file with the latest schema.
 */

import type * as Directus from "@directus/sdk";

import * as DirectusSDK from "@directus/sdk";

type DirectusSDK = typeof DirectusSDK;

/*
declare module "@directus/sdk" {
  type DirectusAccess<Schema = any> = Directus.MergeCoreCollection<
    Schema,
    "directus_access", {
      id: string;
    }
  >;

  type DirectusPolicies<Schema = any> = Directus.MergeCoreCollection<
    Schema,
    "directus_policies", {
      id: string;
    }
  >;
}
*/

export namespace Types {
  // Internal
  export type Nullable<T> = T | null;
  export type Optional<T> = Nullable<T>;
  export type UnknownType<T> = T | unknown;
  export type PrimaryKey<T> = T;

  // Numbers
  export type BigInteger = number;
  export type Decimal = number;
  export type Float = number;
  export type Integer = number;
  export type Number = number;

  // Buffers
  export type Binary = string;
  export type String = string;
  export type Text = string;

  // Date & Time
  export type Date = string | globalThis.Date;
  export type DateTime = string | globalThis.Date;

  // Geometry
  export namespace Geometry {
    export type LineString = any;
    export type MultiLineString = any;
    export type MultiPoint = any;
    export type MultiPolygon = any;
    export type Point = any;
    export type Polygon = any;
  }

  // Complex
  export type JSON = any;
  export type JSONSchema = any;

  // Others
  export type UUID = string;
  export type Boolean = boolean;
  export type Enum = string;
}

/**
 * All collection types.
 */
export namespace Collections {
  /**
   * The resolved directus activity collection type.
   *
   */
  export type DirectusActivity = Directus.DirectusActivity<System>;

  /**
   * The resolved directus collections collection type.
   *
   */
  export type DirectusCollection = Directus.DirectusCollection<System>;

  /**
   * The resolved directus comments collection type.
   *
   */
  export type DirectusComment = Directus.DirectusComment<System>;

  /**
   * The resolved directus fields collection type.
   *
   */
  export type DirectusField = Directus.DirectusField<System>;

  /**
   * The resolved directus files collection type.
   *
   */
  export type DirectusFile = Directus.DirectusFile<System>;

  /**
   * The resolved directus folders collection type.
   *
   */
  export type DirectusFolder = Directus.DirectusFolder<System>;

  /**
   * The resolved directus permissions collection type.
   *
   */
  export type DirectusPermission = Directus.DirectusPermission<System>;

  /**
   * The resolved directus presets collection type.
   *
   */
  export type DirectusPreset = Directus.DirectusPreset<System>;

  /**
   * The resolved directus relations collection type.
   *
   */
  export type DirectusRelation = Directus.DirectusRelation<System>;

  /**
   * The resolved directus revisions collection type.
   *
   */
  export type DirectusRevision = Directus.DirectusRevision<System>;

  /**
   * The resolved directus roles collection type.
   *
   */
  export type DirectusRole = Directus.DirectusRole<System>;

  /**
   * The resolved directus settings collection type.
   *
   */
  export type DirectusSettings = Directus.DirectusSettings<System>;

  /**
   * The resolved directus users collection type.
   *
   */
  export type DirectusUser = Directus.DirectusUser<System>;

  /**
   * The resolved directus webhooks collection type.
   *
   */
  export type DirectusWebhook = Directus.DirectusWebhook<System>;

  /**
   * The resolved directus dashboards collection type.
   *
   */
  export type DirectusDashboard = Directus.DirectusDashboard<System>;

  /**
   * The resolved directus panels collection type.
   *
   */
  export type DirectusPanel = Directus.DirectusPanel<System>;

  /**
   * The resolved directus notifications collection type.
   *
   */
  export type DirectusNotification = Directus.DirectusNotification<System>;

  /**
   * The resolved directus shares collection type.
   *
   */
  export type DirectusShare = Directus.DirectusShare<System>;

  /**
   * The resolved directus flows collection type.
   *
   */
  export type DirectusFlow = Directus.DirectusFlow<System>;

  /**
   * The resolved directus operations collection type.
   *
   */
  export type DirectusOperation = Directus.DirectusOperation<System>;

  /**
   * The resolved directus translations collection type.
   *
   */
  export type DirectusTranslation = Directus.DirectusTranslation<System>;

  /**
   * The resolved directus versions collection type.
   *
   */
  export type DirectusVersion = Directus.DirectusVersion<System>;

  /**
   * The resolved directus extensions collection type.
   *
   */
  export type DirectusExtension = Directus.DirectusExtension<System>;

  /**
   * The bill status collection.
   */
  export interface BillStatus {
    id: Types.PrimaryKey<Types.String>;
    user_created: Types.Optional<Types.UUID | Collections.DirectusUser>;
    date_created: Types.Optional<Types.DateTime>;
    user_updated: Types.Optional<Types.UUID | Collections.DirectusUser>;
    date_updated: Types.Optional<Types.DateTime>;
    name: Types.Optional<Types.String>;
  }

  /**
   * The cdrug collection.
   */
  export interface Cdrug {
    id: Types.PrimaryKey<Types.String>;
    user_created: Types.Optional<Types.UUID | Collections.DirectusUser>;
    date_created: Types.Optional<Types.DateTime>;
    user_updated: Types.Optional<Types.UUID | Collections.DirectusUser>;
    date_updated: Types.Optional<Types.DateTime>;
    drugcode: Types.Optional<Types.String>;
    drugname: Types.Optional<Types.String>;
    unitsell: Types.Optional<Types.String>;
    unitusage: Types.Optional<Types.String>;
    drugcode24: Types.Optional<Types.String>;
    tmtcode: Types.Optional<Types.String>;
    pcucode: Types.Optional<Types.String | Collections.Ou>;
    lotunit: Types.Optional<Types.String | Collections.Unit>;
    packunit: Types.Optional<Types.String>;
  }

  /**
   * The hospital drug collection.
   */
  export interface HospitalDrug {
    h_drugcode: Types.Optional<Types.String>;
    id: Types.PrimaryKey<Types.UUID>;
    user_created: Types.Optional<Types.UUID | Collections.DirectusUser>;
    date_created: Types.Optional<Types.DateTime>;
    user_updated: Types.Optional<Types.UUID | Collections.DirectusUser>;
    date_updated: Types.Optional<Types.DateTime>;
    hcode: Types.Optional<Types.String | Collections.Ou>;
    drugcode24: Types.Optional<Types.String>;
    name: Types.String;
    is_active: Types.Optional<Types.Boolean>;
    default_unit: Types.Optional<Types.String | Collections.Unit>;
    ncd_cup: Types.Optional<Types.Boolean>;
    prepack: Types.Optional<Types.Integer>;
    warehouse: Types.Optional<Types.String | Collections.Warehouse>;
    cost: Types.Optional<Types.Number>;
    only_ou: Collections.HospitalDrugOu[];
    inventory_drug_detail: Collections.InventoryDrugDetail[];
  }

  /**
   * The hospital drug ou collection.
   */
  export interface HospitalDrugOu {
    id: Types.PrimaryKey<Types.Integer>;
    hospital_drug_id: Types.Optional<Types.UUID | Collections.HospitalDrug>;
    ou_id: Types.Optional<Types.String | Collections.Ou>;
  }

  /**
   * The hospital drug rate collection.
   */
  export interface HospitalDrugRate {
    id: Types.PrimaryKey<Types.String>;
    hospital_drug: Types.Optional<Types.UUID | Collections.HospitalDrug>;
    date_updated: Types.Optional<Types.DateTime>;
    pcucode: Types.Optional<Types.String | Collections.Ou>;
    usage_rate_30_day_ago: Types.Optional<Types.Integer>;
  }

  /**
   * The hospital drug unit collection.
   */
  export interface HospitalDrugUnit {
    id: Types.PrimaryKey<Types.UUID>;
    user_created: Types.Optional<Types.UUID | Collections.DirectusUser>;
    date_created: Types.Optional<Types.DateTime>;
    user_updated: Types.Optional<Types.UUID | Collections.DirectusUser>;
    date_updated: Types.Optional<Types.DateTime>;
    hospital_drug: Types.Optional<Types.UUID | Collections.HospitalDrug>;
    unit: Types.Optional<Types.String | Collections.Unit>;
    multiplier: Types.Optional<Types.Integer>;
  }

  /**
   * The inventory bill collection.
   */
  export interface InventoryBill {
    id: Types.PrimaryKey<Types.UUID>;
    user_created: Types.Optional<Types.UUID | Collections.DirectusUser>;
    date_created: Types.Optional<Types.DateTime>;
    user_updated: Types.Optional<Types.UUID | Collections.DirectusUser>;
    date_updated: Types.Optional<Types.DateTime>;
    bill_id: Types.String;
    inventory_drug: Collections.InventoryDrug[];
    hcode: Types.String | Collections.Ou;
    pcucode: Types.String | Collections.Ou;
    status: Types.Optional<Types.String | Collections.BillStatus>;
    request_id: Types.Optional<Types.String>;
    inventory_request: Types.Optional<
      Types.UUID | Collections.InventoryRequest
    >;
    bill_warehouse: Types.String | Collections.Warehouse;
  }

  /**
   * The inventory drug collection.
   */
  export interface InventoryDrug {
    id: Types.PrimaryKey<Types.UUID>;
    user_created: Types.Optional<Types.UUID | Collections.DirectusUser>;
    date_created: Types.Optional<Types.DateTime>;
    user_updated: Types.Optional<Types.UUID | Collections.DirectusUser>;
    date_updated: Types.Optional<Types.DateTime>;
    quantity: Types.Integer;
    confirm_quantity: Types.Optional<Types.Integer>;
    note: Types.Optional<Types.String>;
    inventory_bill: Types.Optional<Types.UUID | Collections.InventoryBill>;
    hospital_drug: Types.Optional<Types.UUID | Collections.HospitalDrug>;
    expire_date: Types.Optional<Types.Date>;
    pack_ratio: Types.Optional<Types.Integer>;
    lot_no: Types.Optional<Types.String>;
    cost: Types.Optional<Types.Number>;
  }

  /**
   * The inventory drug detail collection.
   */
  export interface InventoryDrugDetail {
    id: Types.PrimaryKey<Types.UUID>;
    user_created: Types.Optional<Types.UUID | Collections.DirectusUser>;
    date_created: Types.Optional<Types.DateTime>;
    user_updated: Types.Optional<Types.UUID | Collections.DirectusUser>;
    date_updated: Types.Optional<Types.DateTime>;
    pcucode: Types.String | Collections.Ou;
    drugcode: Types.Optional<Types.String>;
    drugtype: Types.Optional<Types.String>;
    unitsellcode: Types.Optional<Types.String>;
    unitsellname: Types.Optional<Types.String>;
    date: Types.Optional<Types.Date>;
    beginning: Types.Number;
    received: Types.Number;
    issued: Types.Number;
    remaining: Types.Number;
    hospital_drug: Types.Optional<Types.UUID | Collections.HospitalDrug>;
    issued30day: Types.Optional<Types.Number>;
  }

  /**
   * The inventory request collection.
   */
  export interface InventoryRequest {
    id: Types.PrimaryKey<Types.UUID>;
    user_created: Types.Optional<Types.UUID | Collections.DirectusUser>;
    date_created: Types.Optional<Types.DateTime>;
    user_updated: Types.Optional<Types.UUID | Collections.DirectusUser>;
    date_updated: Types.Optional<Types.DateTime>;
    request_id: Types.String;
    inventory_request_drug: Collections.InventoryRequestDrug[];
    hcode: Types.Optional<Types.String | Collections.Ou>;
    pcucode: Types.Optional<Types.String | Collections.Ou>;
    status: Types.Optional<Types.String | Collections.InventoryRequestStatus>;
    bill_warehouse: Types.Optional<Types.String | Collections.Warehouse>;
  }

  /**
   * The inventory request drug collection.
   */
  export interface InventoryRequestDrug {
    id: Types.PrimaryKey<Types.UUID>;
    user_created: Types.Optional<Types.UUID | Collections.DirectusUser>;
    date_created: Types.Optional<Types.DateTime>;
    user_updated: Types.Optional<Types.UUID | Collections.DirectusUser>;
    date_updated: Types.Optional<Types.DateTime>;
    note: Types.Optional<Types.String>;
    hospital_drug: Types.Optional<Types.UUID | Collections.HospitalDrug>;
    inventory_request: Types.Optional<
      Types.UUID | Collections.InventoryRequest
    >;
    quantity: Types.Integer;
    current_remain: Types.Optional<Types.Integer>;
    current_rate: Types.Optional<Types.Integer>;
    current_prepack: Types.Optional<Types.Integer>;
  }

  /**
   * The inventory request status collection.
   */
  export interface InventoryRequestStatus {
    id: Types.PrimaryKey<Types.String>;
    user_created: Types.Optional<Types.UUID | Collections.DirectusUser>;
    date_created: Types.Optional<Types.DateTime>;
    user_updated: Types.Optional<Types.UUID | Collections.DirectusUser>;
    date_updated: Types.Optional<Types.DateTime>;
    name: Types.Optional<Types.String>;
  }

  /**
   * The ou collection.
   */
  export interface Ou {
    id: Types.PrimaryKey<Types.String>;
    user_created: Types.Optional<Types.UUID | Collections.DirectusUser>;
    date_created: Types.Optional<Types.DateTime>;
    user_updated: Types.Optional<Types.UUID | Collections.DirectusUser>;
    date_updated: Types.Optional<Types.DateTime>;
    name: Types.String;
    drug_stock_parent: Types.Optional<Types.String | Collections.Ou>;
    visitdrug: Collections.Visitdrug[];
    date_reset_drug_stock: Types.Optional<Types.Date>;
    warehouse: Collections.OuWarehouse[];
    inventory_drug_detail: Collections.InventoryDrugDetail[];
  }

  /**
   * The ou warehouse collection.
   */
  export interface OuWarehouse {
    id: Types.PrimaryKey<Types.Integer>;
    ou_id: Types.Optional<Types.String | Collections.Ou>;
    warehouse_id: Types.Optional<Types.String | Collections.Warehouse>;
  }

  /**
   * The unit collection.
   */
  export interface Unit {
    id: Types.PrimaryKey<Types.String>;
    user_created: Types.Optional<Types.UUID | Collections.DirectusUser>;
    date_created: Types.Optional<Types.DateTime>;
    user_updated: Types.Optional<Types.UUID | Collections.DirectusUser>;
    date_updated: Types.Optional<Types.DateTime>;
    name: Types.String;
    is_active: Types.Optional<Types.Boolean>;
  }

  /**
   * The unit2unit collection.
   */
  export interface Unit2unit {
    id: Types.PrimaryKey<Types.Integer>;
    user_created: Types.Optional<Types.UUID | Collections.DirectusUser>;
    date_created: Types.Optional<Types.DateTime>;
    user_updated: Types.Optional<Types.UUID | Collections.DirectusUser>;
    date_updated: Types.Optional<Types.DateTime>;
    name: Types.Optional<Types.String>;
    large_unit: Types.Optional<Types.String | Collections.Unit>;
    small_unit: Types.Optional<Types.String | Collections.Unit>;
    is_active: Types.Optional<Types.Boolean>;
  }

  /**
   * The visitdrug collection.
   */
  export interface Visitdrug {
    id: Types.PrimaryKey<Types.UUID>;
    user_created: Types.Optional<Types.UUID | Collections.DirectusUser>;
    date_created: Types.Optional<Types.DateTime>;
    user_updated: Types.Optional<Types.UUID | Collections.DirectusUser>;
    date_updated: Types.Optional<Types.DateTime>;
    visitno: Types.String;
    drugcode: Types.String;
    unit: Types.Integer;
    costprice: Types.Optional<Types.Number>;
    realprice: Types.Optional<Types.Number>;
    dateupdate: Types.Optional<Types.DateTime>;
    hospital_drug: Types.Optional<Types.UUID | Collections.HospitalDrug>;
    pcucode: Types.Optional<Types.String | Collections.Ou>;
    drugtype: Types.Optional<Types.String>;
  }

  /**
   * The warehouse collection.
   */
  export interface Warehouse {
    id: Types.PrimaryKey<Types.String>;
    user_created: Types.Optional<Types.UUID | Collections.DirectusUser>;
    date_created: Types.Optional<Types.DateTime>;
    user_updated: Types.Optional<Types.UUID | Collections.DirectusUser>;
    date_updated: Types.Optional<Types.DateTime>;
    name: Types.Optional<Types.String>;
    is_active: Types.Boolean;
    ou: Collections.OuWarehouse[];
    bill_warehouse: Types.Optional<Types.String | Collections.Warehouse>;
    inventory_request: Collections.InventoryRequest[];
    inventory_bill: Collections.InventoryBill[];
  }
}

/**
 * System schema extensions.
 */

export interface System {
  /**
   * The definition for the directus activity system collection.
   *
   */
  directus_activity: {}[];

  /**
   * The definition for the directus collections system collection.
   *
   */
  directus_collections: {}[];

  /**
   * The definition for the directus comments system collection.
   *
   */
  directus_comments: {}[];

  /**
   * The definition for the directus fields system collection.
   *
   */
  directus_fields: {}[];

  /**
   * The definition for the directus files system collection.
   *
   */
  directus_files: {}[];

  /**
   * The definition for the directus folders system collection.
   *
   */
  directus_folders: {}[];

  /**
   * The definition for the directus permissions system collection.
   *
   */
  directus_permissions: {}[];

  /**
   * The definition for the directus presets system collection.
   *
   */
  directus_presets: {}[];

  /**
   * The definition for the directus relations system collection.
   *
   */
  directus_relations: {}[];

  /**
   * The definition for the directus revisions system collection.
   *
   */
  directus_revisions: {}[];

  /**
   * The definition for the directus roles system collection.
   *
   */
  directus_roles: {}[];

  /**
   * The definition for the directus settings system collection.
   *
   */
  directus_settings: {};

  /**
   * The definition for the directus users system collection.
   *
   */
  directus_users: {
    ou: Types.Optional<Types.String | Collections.Ou>;
  }[];

  /**
   * The definition for the directus webhooks system collection.
   *
   */
  directus_webhooks: {}[];

  /**
   * The definition for the directus dashboards system collection.
   *
   */
  directus_dashboards: {}[];

  /**
   * The definition for the directus panels system collection.
   *
   */
  directus_panels: {}[];

  /**
   * The definition for the directus notifications system collection.
   *
   */
  directus_notifications: {}[];

  /**
   * The definition for the directus shares system collection.
   *
   */
  directus_shares: {}[];

  /**
   * The definition for the directus flows system collection.
   *
   */
  directus_flows: {}[];

  /**
   * The definition for the directus operations system collection.
   *
   */
  directus_operations: {}[];

  /**
   * The definition for the directus translations system collection.
   *
   */
  directus_translations: {}[];

  /**
   * The definition for the directus versions system collection.
   *
   */
  directus_versions: {}[];

  /**
   * The definition for the directus extensions system collection.
   *
   */
  directus_extensions: {}[];
}

/**
 * Schema definition.
 */
export interface Schema extends System {
  /**
   * The bill status collection.
   */
  bill_status: Collections.BillStatus[];

  /**
   * The cdrug collection.
   */
  cdrug: Collections.Cdrug[];

  /**
   * The hospital drug collection.
   */
  hospital_drug: Collections.HospitalDrug[];

  /**
   * The hospital drug ou collection.
   */
  hospital_drug_ou: Collections.HospitalDrugOu[];

  /**
   * The hospital drug rate collection.
   */
  hospital_drug_rate: Collections.HospitalDrugRate[];

  /**
   * The hospital drug unit collection.
   */
  hospital_drug_unit: Collections.HospitalDrugUnit[];

  /**
   * The inventory bill collection.
   */
  inventory_bill: Collections.InventoryBill[];

  /**
   * The inventory drug collection.
   */
  inventory_drug: Collections.InventoryDrug[];

  /**
   * The inventory drug detail collection.
   */
  inventory_drug_detail: Collections.InventoryDrugDetail[];

  /**
   * The inventory request collection.
   */
  inventory_request: Collections.InventoryRequest[];

  /**
   * The inventory request drug collection.
   */
  inventory_request_drug: Collections.InventoryRequestDrug[];

  /**
   * The inventory request status collection.
   */
  inventory_request_status: Collections.InventoryRequestStatus[];

  /**
   * The ou collection.
   */
  ou: Collections.Ou[];

  /**
   * The ou warehouse collection.
   */
  ou_warehouse: Collections.OuWarehouse[];

  /**
   * The unit collection.
   */
  unit: Collections.Unit[];

  /**
   * The unit2unit collection.
   */
  unit2unit: Collections.Unit2unit[];

  /**
   * The visitdrug collection.
   */
  visitdrug: Collections.Visitdrug[];

  /**
   * The warehouse collection.
   */
  warehouse: Collections.Warehouse[];
}

export interface TypedCollectionItemsWrapper<Collection extends object> {
  /**
   * Creates many items in the collection.
   */
  create<const Query extends DirectusSDK.Query<Schema, Collection>>(
    items: Partial<Collection>[],
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<Schema, Collection, Query["fields"]>[]
  >;

  /**
   * Read many items from the collection.
   */
  query<const Query extends DirectusSDK.Query<Schema, Collection>>(
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<Schema, Collection, Query["fields"]>[]
  >;

  /**
   * Read the first item from the collection matching the query.
   */
  find<const Query extends DirectusSDK.Query<Schema, Collection>>(
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<Schema, Collection, Query["fields"]>
    | undefined
  >;

  /**
   * Update many items in the collection.
   */
  update<const Query extends DirectusSDK.Query<Schema, Collection[]>>(
    keys: string[] | number[],
    patch: Partial<Collection>,
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<Schema, Collection, Query["fields"]>[]
  >;

  /**
   * Remove many items in the collection.
   */
  remove<const Query extends DirectusSDK.Query<Schema, Collection>>(
    keys: string[] | number[],
  ): Promise<void>;
}

export interface TypedCollectionItemWrapper<Collection extends object> {
  /**
   * Create a single item in the collection.
   */
  create<const Query extends DirectusSDK.Query<Schema, Collection>>(
    item: Partial<Collection>,
    query?: Query,
  ): Promise<DirectusSDK.ApplyQueryFields<Schema, Collection, Query["fields"]>>;

  /**
   * Read a single item from the collection.
   */
  get<const Query extends DirectusSDK.Query<Schema, Collection>>(
    key: string | number,
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<Schema, Collection, Query["fields"]>
    | undefined
  >;

  /**
   * Update a single item from the collection.
   */
  update<const Query extends DirectusSDK.Query<Schema, Collection>>(
    key: string | number,
    patch: Partial<Collection>,
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<Schema, Collection, Query["fields"]>
    | undefined
  >;

  /**
   * Remove many items in the collection.
   */
  remove<const Query extends DirectusSDK.Query<Schema, Collection>>(
    key: string | number,
  ): Promise<void>;
}

/**
 * Helper functions
 */

/**
 * Create many bill status items.
 */
export function createBillStatusItems<
  const Query extends Directus.Query<Schema, Collections.BillStatus[]>,
>(items: Partial<Collections.BillStatus>[], query?: Query) {
  return DirectusSDK.createItems<Schema, "bill_status", Query>(
    "bill_status",
    items,
    query,
  );
}

/**
 * Create a single bill status item.
 */
export function createBillStatusItem<
  const Query extends DirectusSDK.Query<Schema, Collections.BillStatus[]>, // Is this a mistake? Why []?
>(item: Partial<Collections.BillStatus>, query?: Query) {
  return DirectusSDK.createItem<Schema, "bill_status", Query>(
    "bill_status",
    item,
    query,
  );
}

/**
 * Read many bill status items.
 */
export function readBillStatusItems<
  const Query extends Directus.Query<Schema, Collections.BillStatus>,
>(query?: Query) {
  return DirectusSDK.readItems<Schema, "bill_status", Query>(
    "bill_status",
    query,
  );
}

/**
 * Read many bill status items.
 */
export const listBillStatus = readBillStatusItems;

/**
 * Gets a single known bill status item by id.
 */
export function readBillStatusItem<
  const Query extends Directus.Query<Schema, Collections.BillStatus>,
>(key: string | number, query?: Query) {
  return DirectusSDK.readItem<Schema, "bill_status", Query>(
    "bill_status",
    key,
    query,
  );
}

/**
 * Gets a single known bill status item by id.
 */
export const readBillStatus = readBillStatusItem;

/**
 * Read many bill status items.
 */
export function updateBillStatusItems<
  const Query extends Directus.Query<Schema, Collections.BillStatus[]>,
>(
  keys: string[] | number[],
  patch: Partial<Collections.BillStatus>,
  query?: Query,
) {
  return DirectusSDK.updateItems<Schema, "bill_status", Query>(
    "bill_status",
    keys,
    patch,
    query,
  );
}

/**
 * Gets a single known bill status item by id.
 */
export function updateBillStatusItem<
  const Query extends Directus.Query<Schema, Collections.BillStatus[]>,
>(key: string | number, patch: Partial<Collections.BillStatus>, query?: Query) {
  return DirectusSDK.updateItem<Schema, "bill_status", Query>(
    "bill_status",
    key,
    patch,
    query,
  );
}

/**
 * Deletes many bill status items.
 */
export function deleteBillStatusItems<
  const Query extends Directus.Query<Schema, Collections.BillStatus[]>,
>(keys: string[] | number[]) {
  return DirectusSDK.deleteItems<Schema, "bill_status", Query>(
    "bill_status",
    keys,
  );
}

/**
 * Deletes a single known bill status item by id.
 */
export function deleteBillStatusItem(key: string | number) {
  return DirectusSDK.deleteItem<Schema, "bill_status">("bill_status", key);
}

export class BillStatusItems
  implements TypedCollectionItemsWrapper<Collections.BillStatus> {
  /**
   *
   */
  constructor(
    private client: Directus.DirectusClient<Schema> &
      Directus.RestClient<Schema>,
  ) { }

  /**
   * Creates many items in the collection.
   */
  async create<
    const Query extends DirectusSDK.Query<Schema, Collections.BillStatus>,
  >(
    items: Partial<Collections.BillStatus>[],
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.BillStatus,
      Query["fields"]
    >[]
  > {
    return (await this.client.request(
      createBillStatusItems(items, query as any),
    )) as any; // Seems like a bug in the SDK.
  }

  /**
   * Read many items from the collection.
   */
  async query<
    const Query extends Directus.Query<Schema, Collections.BillStatus>,
  >(
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.BillStatus,
      Query["fields"]
    >[]
  > {
    return await this.client.request(readBillStatusItems(query));
  }

  /**
   * Read the first item from the collection matching the query.
   */
  async find<
    const Query extends Directus.Query<Schema, Collections.BillStatus>,
  >(
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.BillStatus,
      Query["fields"]
    >
    | undefined
  > {
    const items = await this.client.request(
      readBillStatusItems({
        ...query,
        limit: 1,
      }),
    );
    return items?.[0] as any; // TODO: fix
  }

  /**
   * Update many items in the collection.
   */
  async update<
    const Query extends Directus.Query<Schema, Collections.BillStatus[]>,
  >(
    keys: string[] | number[],
    patch: Partial<Collections.BillStatus>,
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.BillStatus,
      Query["fields"]
    >[]
  > {
    return await this.client.request(updateBillStatusItems(keys, patch, query));
  }

  /**
   * Remove many items in the collection.
   */
  async remove<
    const Query extends Directus.Query<Schema, Collections.BillStatus>,
  >(keys: string[] | number[]): Promise<void> { }
}

export class BillStatusItem
  implements TypedCollectionItemWrapper<Collections.BillStatus> {
  /**
   *
   */
  constructor(
    private client: Directus.DirectusClient<Schema> &
      Directus.RestClient<Schema>,
  ) { }

  /**
   * Create a single item in the collection.
   */
  async create<
    const Query extends Directus.Query<Schema, Collections.BillStatus>,
  >(
    item: Partial<Collections.BillStatus>,
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.BillStatus,
      Query["fields"]
    >
  > {
    return (await this.client.request(
      createBillStatusItem(item, query as any),
    )) as any;
  }

  /**
   * Read a single item from the collection.
   */
  async get<const Query extends Directus.Query<Schema, Collections.BillStatus>>(
    key: string | number,
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.BillStatus,
      Query["fields"]
    >
    | undefined
  > {
    return await this.client.request(readBillStatusItem(key, query));
  }

  /**
   * Update a single item from the collection.
   */
  async update<
    const Query extends Directus.Query<Schema, Collections.BillStatus>,
  >(
    key: string | number,
    patch: Partial<Collections.BillStatus>,
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.BillStatus,
      Query["fields"]
    >
    | undefined
  > {
    return (await this.client.request(
      updateBillStatusItem(key, patch, query as any),
    )) as any;
  }

  /**
   * Remove many items in the collection.
   */
  async remove<
    const Query extends Directus.Query<Schema, Collections.BillStatus>,
  >(key: string | number): Promise<void> {
    return await this.client.request(deleteBillStatusItem(key));
  }
}

/**
 * Create many cdrug items.
 */
export function createCdrugItems<
  const Query extends Directus.Query<Schema, Collections.Cdrug[]>,
>(items: Partial<Collections.Cdrug>[], query?: Query) {
  return DirectusSDK.createItems<Schema, "cdrug", Query>("cdrug", items, query);
}

/**
 * Create a single cdrug item.
 */
export function createCdrugItem<
  const Query extends DirectusSDK.Query<Schema, Collections.Cdrug[]>, // Is this a mistake? Why []?
>(item: Partial<Collections.Cdrug>, query?: Query) {
  return DirectusSDK.createItem<Schema, "cdrug", Query>("cdrug", item, query);
}

/**
 * Read many cdrug items.
 */
export function readCdrugItems<
  const Query extends Directus.Query<Schema, Collections.Cdrug>,
>(query?: Query) {
  return DirectusSDK.readItems<Schema, "cdrug", Query>("cdrug", query);
}

/**
 * Read many cdrug items.
 */
export const listCdrug = readCdrugItems;

/**
 * Gets a single known cdrug item by id.
 */
export function readCdrugItem<
  const Query extends Directus.Query<Schema, Collections.Cdrug>,
>(key: string | number, query?: Query) {
  return DirectusSDK.readItem<Schema, "cdrug", Query>("cdrug", key, query);
}

/**
 * Gets a single known cdrug item by id.
 */
export const readCdrug = readCdrugItem;

/**
 * Read many cdrug items.
 */
export function updateCdrugItems<
  const Query extends Directus.Query<Schema, Collections.Cdrug[]>,
>(keys: string[] | number[], patch: Partial<Collections.Cdrug>, query?: Query) {
  return DirectusSDK.updateItems<Schema, "cdrug", Query>(
    "cdrug",
    keys,
    patch,
    query,
  );
}

/**
 * Gets a single known cdrug item by id.
 */
export function updateCdrugItem<
  const Query extends Directus.Query<Schema, Collections.Cdrug[]>,
>(key: string | number, patch: Partial<Collections.Cdrug>, query?: Query) {
  return DirectusSDK.updateItem<Schema, "cdrug", Query>(
    "cdrug",
    key,
    patch,
    query,
  );
}

/**
 * Deletes many cdrug items.
 */
export function deleteCdrugItems<
  const Query extends Directus.Query<Schema, Collections.Cdrug[]>,
>(keys: string[] | number[]) {
  return DirectusSDK.deleteItems<Schema, "cdrug", Query>("cdrug", keys);
}

/**
 * Deletes a single known cdrug item by id.
 */
export function deleteCdrugItem(key: string | number) {
  return DirectusSDK.deleteItem<Schema, "cdrug">("cdrug", key);
}

export class CdrugItems
  implements TypedCollectionItemsWrapper<Collections.Cdrug> {
  /**
   *
   */
  constructor(
    private client: Directus.DirectusClient<Schema> &
      Directus.RestClient<Schema>,
  ) { }

  /**
   * Creates many items in the collection.
   */
  async create<
    const Query extends DirectusSDK.Query<Schema, Collections.Cdrug>,
  >(
    items: Partial<Collections.Cdrug>[],
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<Schema, Collections.Cdrug, Query["fields"]>[]
  > {
    return (await this.client.request(
      createCdrugItems(items, query as any),
    )) as any; // Seems like a bug in the SDK.
  }

  /**
   * Read many items from the collection.
   */
  async query<const Query extends Directus.Query<Schema, Collections.Cdrug>>(
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<Schema, Collections.Cdrug, Query["fields"]>[]
  > {
    return await this.client.request(readCdrugItems(query));
  }

  /**
   * Read the first item from the collection matching the query.
   */
  async find<const Query extends Directus.Query<Schema, Collections.Cdrug>>(
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<Schema, Collections.Cdrug, Query["fields"]>
    | undefined
  > {
    const items = await this.client.request(
      readCdrugItems({
        ...query,
        limit: 1,
      }),
    );
    return items?.[0] as any; // TODO: fix
  }

  /**
   * Update many items in the collection.
   */
  async update<const Query extends Directus.Query<Schema, Collections.Cdrug[]>>(
    keys: string[] | number[],
    patch: Partial<Collections.Cdrug>,
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<Schema, Collections.Cdrug, Query["fields"]>[]
  > {
    return await this.client.request(updateCdrugItems(keys, patch, query));
  }

  /**
   * Remove many items in the collection.
   */
  async remove<const Query extends Directus.Query<Schema, Collections.Cdrug>>(
    keys: string[] | number[],
  ): Promise<void> { }
}

export class CdrugItem
  implements TypedCollectionItemWrapper<Collections.Cdrug> {
  /**
   *
   */
  constructor(
    private client: Directus.DirectusClient<Schema> &
      Directus.RestClient<Schema>,
  ) { }

  /**
   * Create a single item in the collection.
   */
  async create<const Query extends Directus.Query<Schema, Collections.Cdrug>>(
    item: Partial<Collections.Cdrug>,
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<Schema, Collections.Cdrug, Query["fields"]>
  > {
    return (await this.client.request(
      createCdrugItem(item, query as any),
    )) as any;
  }

  /**
   * Read a single item from the collection.
   */
  async get<const Query extends Directus.Query<Schema, Collections.Cdrug>>(
    key: string | number,
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<Schema, Collections.Cdrug, Query["fields"]>
    | undefined
  > {
    return await this.client.request(readCdrugItem(key, query));
  }

  /**
   * Update a single item from the collection.
   */
  async update<const Query extends Directus.Query<Schema, Collections.Cdrug>>(
    key: string | number,
    patch: Partial<Collections.Cdrug>,
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<Schema, Collections.Cdrug, Query["fields"]>
    | undefined
  > {
    return (await this.client.request(
      updateCdrugItem(key, patch, query as any),
    )) as any;
  }

  /**
   * Remove many items in the collection.
   */
  async remove<const Query extends Directus.Query<Schema, Collections.Cdrug>>(
    key: string | number,
  ): Promise<void> {
    return await this.client.request(deleteCdrugItem(key));
  }
}

/**
 * Create many hospital drug items.
 */
export function createHospitalDrugItems<
  const Query extends Directus.Query<Schema, Collections.HospitalDrug[]>,
>(items: Partial<Collections.HospitalDrug>[], query?: Query) {
  return DirectusSDK.createItems<Schema, "hospital_drug", Query>(
    "hospital_drug",
    items,
    query,
  );
}

/**
 * Create a single hospital drug item.
 */
export function createHospitalDrugItem<
  const Query extends DirectusSDK.Query<Schema, Collections.HospitalDrug[]>, // Is this a mistake? Why []?
>(item: Partial<Collections.HospitalDrug>, query?: Query) {
  return DirectusSDK.createItem<Schema, "hospital_drug", Query>(
    "hospital_drug",
    item,
    query,
  );
}

/**
 * Read many hospital drug items.
 */
export function readHospitalDrugItems<
  const Query extends Directus.Query<Schema, Collections.HospitalDrug>,
>(query?: Query) {
  return DirectusSDK.readItems<Schema, "hospital_drug", Query>(
    "hospital_drug",
    query,
  );
}

/**
 * Read many hospital drug items.
 */
export const listHospitalDrug = readHospitalDrugItems;

/**
 * Gets a single known hospital drug item by id.
 */
export function readHospitalDrugItem<
  const Query extends Directus.Query<Schema, Collections.HospitalDrug>,
>(key: string | number, query?: Query) {
  return DirectusSDK.readItem<Schema, "hospital_drug", Query>(
    "hospital_drug",
    key,
    query,
  );
}

/**
 * Gets a single known hospital drug item by id.
 */
export const readHospitalDrug = readHospitalDrugItem;

/**
 * Read many hospital drug items.
 */
export function updateHospitalDrugItems<
  const Query extends Directus.Query<Schema, Collections.HospitalDrug[]>,
>(
  keys: string[] | number[],
  patch: Partial<Collections.HospitalDrug>,
  query?: Query,
) {
  return DirectusSDK.updateItems<Schema, "hospital_drug", Query>(
    "hospital_drug",
    keys,
    patch,
    query,
  );
}

/**
 * Gets a single known hospital drug item by id.
 */
export function updateHospitalDrugItem<
  const Query extends Directus.Query<Schema, Collections.HospitalDrug[]>,
>(
  key: string | number,
  patch: Partial<Collections.HospitalDrug>,
  query?: Query,
) {
  return DirectusSDK.updateItem<Schema, "hospital_drug", Query>(
    "hospital_drug",
    key,
    patch,
    query,
  );
}

/**
 * Deletes many hospital drug items.
 */
export function deleteHospitalDrugItems<
  const Query extends Directus.Query<Schema, Collections.HospitalDrug[]>,
>(keys: string[] | number[]) {
  return DirectusSDK.deleteItems<Schema, "hospital_drug", Query>(
    "hospital_drug",
    keys,
  );
}

/**
 * Deletes a single known hospital drug item by id.
 */
export function deleteHospitalDrugItem(key: string | number) {
  return DirectusSDK.deleteItem<Schema, "hospital_drug">("hospital_drug", key);
}

export class HospitalDrugItems
  implements TypedCollectionItemsWrapper<Collections.HospitalDrug> {
  /**
   *
   */
  constructor(
    private client: Directus.DirectusClient<Schema> &
      Directus.RestClient<Schema>,
  ) { }

  /**
   * Creates many items in the collection.
   */
  async create<
    const Query extends DirectusSDK.Query<Schema, Collections.HospitalDrug>,
  >(
    items: Partial<Collections.HospitalDrug>[],
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.HospitalDrug,
      Query["fields"]
    >[]
  > {
    return (await this.client.request(
      createHospitalDrugItems(items, query as any),
    )) as any; // Seems like a bug in the SDK.
  }

  /**
   * Read many items from the collection.
   */
  async query<
    const Query extends Directus.Query<Schema, Collections.HospitalDrug>,
  >(
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.HospitalDrug,
      Query["fields"]
    >[]
  > {
    return await this.client.request(readHospitalDrugItems(query));
  }

  /**
   * Read the first item from the collection matching the query.
   */
  async find<
    const Query extends Directus.Query<Schema, Collections.HospitalDrug>,
  >(
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.HospitalDrug,
      Query["fields"]
    >
    | undefined
  > {
    const items = await this.client.request(
      readHospitalDrugItems({
        ...query,
        limit: 1,
      }),
    );
    return items?.[0] as any; // TODO: fix
  }

  /**
   * Update many items in the collection.
   */
  async update<
    const Query extends Directus.Query<Schema, Collections.HospitalDrug[]>,
  >(
    keys: string[] | number[],
    patch: Partial<Collections.HospitalDrug>,
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.HospitalDrug,
      Query["fields"]
    >[]
  > {
    return await this.client.request(
      updateHospitalDrugItems(keys, patch, query),
    );
  }

  /**
   * Remove many items in the collection.
   */
  async remove<
    const Query extends Directus.Query<Schema, Collections.HospitalDrug>,
  >(keys: string[] | number[]): Promise<void> { }
}

export class HospitalDrugItem
  implements TypedCollectionItemWrapper<Collections.HospitalDrug> {
  /**
   *
   */
  constructor(
    private client: Directus.DirectusClient<Schema> &
      Directus.RestClient<Schema>,
  ) { }

  /**
   * Create a single item in the collection.
   */
  async create<
    const Query extends Directus.Query<Schema, Collections.HospitalDrug>,
  >(
    item: Partial<Collections.HospitalDrug>,
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.HospitalDrug,
      Query["fields"]
    >
  > {
    return (await this.client.request(
      createHospitalDrugItem(item, query as any),
    )) as any;
  }

  /**
   * Read a single item from the collection.
   */
  async get<
    const Query extends Directus.Query<Schema, Collections.HospitalDrug>,
  >(
    key: string | number,
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.HospitalDrug,
      Query["fields"]
    >
    | undefined
  > {
    return await this.client.request(readHospitalDrugItem(key, query));
  }

  /**
   * Update a single item from the collection.
   */
  async update<
    const Query extends Directus.Query<Schema, Collections.HospitalDrug>,
  >(
    key: string | number,
    patch: Partial<Collections.HospitalDrug>,
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.HospitalDrug,
      Query["fields"]
    >
    | undefined
  > {
    return (await this.client.request(
      updateHospitalDrugItem(key, patch, query as any),
    )) as any;
  }

  /**
   * Remove many items in the collection.
   */
  async remove<
    const Query extends Directus.Query<Schema, Collections.HospitalDrug>,
  >(key: string | number): Promise<void> {
    return await this.client.request(deleteHospitalDrugItem(key));
  }
}

/**
 * Create many hospital drug ou items.
 */
export function createHospitalDrugOuItems<
  const Query extends Directus.Query<Schema, Collections.HospitalDrugOu[]>,
>(items: Partial<Collections.HospitalDrugOu>[], query?: Query) {
  return DirectusSDK.createItems<Schema, "hospital_drug_ou", Query>(
    "hospital_drug_ou",
    items,
    query,
  );
}

/**
 * Create a single hospital drug ou item.
 */
export function createHospitalDrugOuItem<
  const Query extends DirectusSDK.Query<Schema, Collections.HospitalDrugOu[]>, // Is this a mistake? Why []?
>(item: Partial<Collections.HospitalDrugOu>, query?: Query) {
  return DirectusSDK.createItem<Schema, "hospital_drug_ou", Query>(
    "hospital_drug_ou",
    item,
    query,
  );
}

/**
 * Read many hospital drug ou items.
 */
export function readHospitalDrugOuItems<
  const Query extends Directus.Query<Schema, Collections.HospitalDrugOu>,
>(query?: Query) {
  return DirectusSDK.readItems<Schema, "hospital_drug_ou", Query>(
    "hospital_drug_ou",
    query,
  );
}

/**
 * Read many hospital drug ou items.
 */
export const listHospitalDrugOu = readHospitalDrugOuItems;

/**
 * Gets a single known hospital drug ou item by id.
 */
export function readHospitalDrugOuItem<
  const Query extends Directus.Query<Schema, Collections.HospitalDrugOu>,
>(key: string | number, query?: Query) {
  return DirectusSDK.readItem<Schema, "hospital_drug_ou", Query>(
    "hospital_drug_ou",
    key,
    query,
  );
}

/**
 * Gets a single known hospital drug ou item by id.
 */
export const readHospitalDrugOu = readHospitalDrugOuItem;

/**
 * Read many hospital drug ou items.
 */
export function updateHospitalDrugOuItems<
  const Query extends Directus.Query<Schema, Collections.HospitalDrugOu[]>,
>(
  keys: string[] | number[],
  patch: Partial<Collections.HospitalDrugOu>,
  query?: Query,
) {
  return DirectusSDK.updateItems<Schema, "hospital_drug_ou", Query>(
    "hospital_drug_ou",
    keys,
    patch,
    query,
  );
}

/**
 * Gets a single known hospital drug ou item by id.
 */
export function updateHospitalDrugOuItem<
  const Query extends Directus.Query<Schema, Collections.HospitalDrugOu[]>,
>(
  key: string | number,
  patch: Partial<Collections.HospitalDrugOu>,
  query?: Query,
) {
  return DirectusSDK.updateItem<Schema, "hospital_drug_ou", Query>(
    "hospital_drug_ou",
    key,
    patch,
    query,
  );
}

/**
 * Deletes many hospital drug ou items.
 */
export function deleteHospitalDrugOuItems<
  const Query extends Directus.Query<Schema, Collections.HospitalDrugOu[]>,
>(keys: string[] | number[]) {
  return DirectusSDK.deleteItems<Schema, "hospital_drug_ou", Query>(
    "hospital_drug_ou",
    keys,
  );
}

/**
 * Deletes a single known hospital drug ou item by id.
 */
export function deleteHospitalDrugOuItem(key: string | number) {
  return DirectusSDK.deleteItem<Schema, "hospital_drug_ou">(
    "hospital_drug_ou",
    key,
  );
}

export class HospitalDrugOuItems
  implements TypedCollectionItemsWrapper<Collections.HospitalDrugOu> {
  /**
   *
   */
  constructor(
    private client: Directus.DirectusClient<Schema> &
      Directus.RestClient<Schema>,
  ) { }

  /**
   * Creates many items in the collection.
   */
  async create<
    const Query extends DirectusSDK.Query<Schema, Collections.HospitalDrugOu>,
  >(
    items: Partial<Collections.HospitalDrugOu>[],
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.HospitalDrugOu,
      Query["fields"]
    >[]
  > {
    return (await this.client.request(
      createHospitalDrugOuItems(items, query as any),
    )) as any; // Seems like a bug in the SDK.
  }

  /**
   * Read many items from the collection.
   */
  async query<
    const Query extends Directus.Query<Schema, Collections.HospitalDrugOu>,
  >(
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.HospitalDrugOu,
      Query["fields"]
    >[]
  > {
    return await this.client.request(readHospitalDrugOuItems(query));
  }

  /**
   * Read the first item from the collection matching the query.
   */
  async find<
    const Query extends Directus.Query<Schema, Collections.HospitalDrugOu>,
  >(
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.HospitalDrugOu,
      Query["fields"]
    >
    | undefined
  > {
    const items = await this.client.request(
      readHospitalDrugOuItems({
        ...query,
        limit: 1,
      }),
    );
    return items?.[0] as any; // TODO: fix
  }

  /**
   * Update many items in the collection.
   */
  async update<
    const Query extends Directus.Query<Schema, Collections.HospitalDrugOu[]>,
  >(
    keys: string[] | number[],
    patch: Partial<Collections.HospitalDrugOu>,
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.HospitalDrugOu,
      Query["fields"]
    >[]
  > {
    return await this.client.request(
      updateHospitalDrugOuItems(keys, patch, query),
    );
  }

  /**
   * Remove many items in the collection.
   */
  async remove<
    const Query extends Directus.Query<Schema, Collections.HospitalDrugOu>,
  >(keys: string[] | number[]): Promise<void> { }
}

export class HospitalDrugOuItem
  implements TypedCollectionItemWrapper<Collections.HospitalDrugOu> {
  /**
   *
   */
  constructor(
    private client: Directus.DirectusClient<Schema> &
      Directus.RestClient<Schema>,
  ) { }

  /**
   * Create a single item in the collection.
   */
  async create<
    const Query extends Directus.Query<Schema, Collections.HospitalDrugOu>,
  >(
    item: Partial<Collections.HospitalDrugOu>,
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.HospitalDrugOu,
      Query["fields"]
    >
  > {
    return (await this.client.request(
      createHospitalDrugOuItem(item, query as any),
    )) as any;
  }

  /**
   * Read a single item from the collection.
   */
  async get<
    const Query extends Directus.Query<Schema, Collections.HospitalDrugOu>,
  >(
    key: string | number,
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.HospitalDrugOu,
      Query["fields"]
    >
    | undefined
  > {
    return await this.client.request(readHospitalDrugOuItem(key, query));
  }

  /**
   * Update a single item from the collection.
   */
  async update<
    const Query extends Directus.Query<Schema, Collections.HospitalDrugOu>,
  >(
    key: string | number,
    patch: Partial<Collections.HospitalDrugOu>,
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.HospitalDrugOu,
      Query["fields"]
    >
    | undefined
  > {
    return (await this.client.request(
      updateHospitalDrugOuItem(key, patch, query as any),
    )) as any;
  }

  /**
   * Remove many items in the collection.
   */
  async remove<
    const Query extends Directus.Query<Schema, Collections.HospitalDrugOu>,
  >(key: string | number): Promise<void> {
    return await this.client.request(deleteHospitalDrugOuItem(key));
  }
}

/**
 * Create many hospital drug rate items.
 */
export function createHospitalDrugRateItems<
  const Query extends Directus.Query<Schema, Collections.HospitalDrugRate[]>,
>(items: Partial<Collections.HospitalDrugRate>[], query?: Query) {
  return DirectusSDK.createItems<Schema, "hospital_drug_rate", Query>(
    "hospital_drug_rate",
    items,
    query,
  );
}

/**
 * Create a single hospital drug rate item.
 */
export function createHospitalDrugRateItem<
  const Query extends DirectusSDK.Query<Schema, Collections.HospitalDrugRate[]>, // Is this a mistake? Why []?
>(item: Partial<Collections.HospitalDrugRate>, query?: Query) {
  return DirectusSDK.createItem<Schema, "hospital_drug_rate", Query>(
    "hospital_drug_rate",
    item,
    query,
  );
}

/**
 * Read many hospital drug rate items.
 */
export function readHospitalDrugRateItems<
  const Query extends Directus.Query<Schema, Collections.HospitalDrugRate>,
>(query?: Query) {
  return DirectusSDK.readItems<Schema, "hospital_drug_rate", Query>(
    "hospital_drug_rate",
    query,
  );
}

/**
 * Read many hospital drug rate items.
 */
export const listHospitalDrugRate = readHospitalDrugRateItems;

/**
 * Gets a single known hospital drug rate item by id.
 */
export function readHospitalDrugRateItem<
  const Query extends Directus.Query<Schema, Collections.HospitalDrugRate>,
>(key: string | number, query?: Query) {
  return DirectusSDK.readItem<Schema, "hospital_drug_rate", Query>(
    "hospital_drug_rate",
    key,
    query,
  );
}

/**
 * Gets a single known hospital drug rate item by id.
 */
export const readHospitalDrugRate = readHospitalDrugRateItem;

/**
 * Read many hospital drug rate items.
 */
export function updateHospitalDrugRateItems<
  const Query extends Directus.Query<Schema, Collections.HospitalDrugRate[]>,
>(
  keys: string[] | number[],
  patch: Partial<Collections.HospitalDrugRate>,
  query?: Query,
) {
  return DirectusSDK.updateItems<Schema, "hospital_drug_rate", Query>(
    "hospital_drug_rate",
    keys,
    patch,
    query,
  );
}

/**
 * Gets a single known hospital drug rate item by id.
 */
export function updateHospitalDrugRateItem<
  const Query extends Directus.Query<Schema, Collections.HospitalDrugRate[]>,
>(
  key: string | number,
  patch: Partial<Collections.HospitalDrugRate>,
  query?: Query,
) {
  return DirectusSDK.updateItem<Schema, "hospital_drug_rate", Query>(
    "hospital_drug_rate",
    key,
    patch,
    query,
  );
}

/**
 * Deletes many hospital drug rate items.
 */
export function deleteHospitalDrugRateItems<
  const Query extends Directus.Query<Schema, Collections.HospitalDrugRate[]>,
>(keys: string[] | number[]) {
  return DirectusSDK.deleteItems<Schema, "hospital_drug_rate", Query>(
    "hospital_drug_rate",
    keys,
  );
}

/**
 * Deletes a single known hospital drug rate item by id.
 */
export function deleteHospitalDrugRateItem(key: string | number) {
  return DirectusSDK.deleteItem<Schema, "hospital_drug_rate">(
    "hospital_drug_rate",
    key,
  );
}

export class HospitalDrugRateItems
  implements TypedCollectionItemsWrapper<Collections.HospitalDrugRate> {
  /**
   *
   */
  constructor(
    private client: Directus.DirectusClient<Schema> &
      Directus.RestClient<Schema>,
  ) { }

  /**
   * Creates many items in the collection.
   */
  async create<
    const Query extends DirectusSDK.Query<Schema, Collections.HospitalDrugRate>,
  >(
    items: Partial<Collections.HospitalDrugRate>[],
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.HospitalDrugRate,
      Query["fields"]
    >[]
  > {
    return (await this.client.request(
      createHospitalDrugRateItems(items, query as any),
    )) as any; // Seems like a bug in the SDK.
  }

  /**
   * Read many items from the collection.
   */
  async query<
    const Query extends Directus.Query<Schema, Collections.HospitalDrugRate>,
  >(
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.HospitalDrugRate,
      Query["fields"]
    >[]
  > {
    return await this.client.request(readHospitalDrugRateItems(query));
  }

  /**
   * Read the first item from the collection matching the query.
   */
  async find<
    const Query extends Directus.Query<Schema, Collections.HospitalDrugRate>,
  >(
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.HospitalDrugRate,
      Query["fields"]
    >
    | undefined
  > {
    const items = await this.client.request(
      readHospitalDrugRateItems({
        ...query,
        limit: 1,
      }),
    );
    return items?.[0] as any; // TODO: fix
  }

  /**
   * Update many items in the collection.
   */
  async update<
    const Query extends Directus.Query<Schema, Collections.HospitalDrugRate[]>,
  >(
    keys: string[] | number[],
    patch: Partial<Collections.HospitalDrugRate>,
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.HospitalDrugRate,
      Query["fields"]
    >[]
  > {
    return await this.client.request(
      updateHospitalDrugRateItems(keys, patch, query),
    );
  }

  /**
   * Remove many items in the collection.
   */
  async remove<
    const Query extends Directus.Query<Schema, Collections.HospitalDrugRate>,
  >(keys: string[] | number[]): Promise<void> { }
}

export class HospitalDrugRateItem
  implements TypedCollectionItemWrapper<Collections.HospitalDrugRate> {
  /**
   *
   */
  constructor(
    private client: Directus.DirectusClient<Schema> &
      Directus.RestClient<Schema>,
  ) { }

  /**
   * Create a single item in the collection.
   */
  async create<
    const Query extends Directus.Query<Schema, Collections.HospitalDrugRate>,
  >(
    item: Partial<Collections.HospitalDrugRate>,
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.HospitalDrugRate,
      Query["fields"]
    >
  > {
    return (await this.client.request(
      createHospitalDrugRateItem(item, query as any),
    )) as any;
  }

  /**
   * Read a single item from the collection.
   */
  async get<
    const Query extends Directus.Query<Schema, Collections.HospitalDrugRate>,
  >(
    key: string | number,
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.HospitalDrugRate,
      Query["fields"]
    >
    | undefined
  > {
    return await this.client.request(readHospitalDrugRateItem(key, query));
  }

  /**
   * Update a single item from the collection.
   */
  async update<
    const Query extends Directus.Query<Schema, Collections.HospitalDrugRate>,
  >(
    key: string | number,
    patch: Partial<Collections.HospitalDrugRate>,
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.HospitalDrugRate,
      Query["fields"]
    >
    | undefined
  > {
    return (await this.client.request(
      updateHospitalDrugRateItem(key, patch, query as any),
    )) as any;
  }

  /**
   * Remove many items in the collection.
   */
  async remove<
    const Query extends Directus.Query<Schema, Collections.HospitalDrugRate>,
  >(key: string | number): Promise<void> {
    return await this.client.request(deleteHospitalDrugRateItem(key));
  }
}

/**
 * Create many hospital drug unit items.
 */
export function createHospitalDrugUnitItems<
  const Query extends Directus.Query<Schema, Collections.HospitalDrugUnit[]>,
>(items: Partial<Collections.HospitalDrugUnit>[], query?: Query) {
  return DirectusSDK.createItems<Schema, "hospital_drug_unit", Query>(
    "hospital_drug_unit",
    items,
    query,
  );
}

/**
 * Create a single hospital drug unit item.
 */
export function createHospitalDrugUnitItem<
  const Query extends DirectusSDK.Query<Schema, Collections.HospitalDrugUnit[]>, // Is this a mistake? Why []?
>(item: Partial<Collections.HospitalDrugUnit>, query?: Query) {
  return DirectusSDK.createItem<Schema, "hospital_drug_unit", Query>(
    "hospital_drug_unit",
    item,
    query,
  );
}

/**
 * Read many hospital drug unit items.
 */
export function readHospitalDrugUnitItems<
  const Query extends Directus.Query<Schema, Collections.HospitalDrugUnit>,
>(query?: Query) {
  return DirectusSDK.readItems<Schema, "hospital_drug_unit", Query>(
    "hospital_drug_unit",
    query,
  );
}

/**
 * Read many hospital drug unit items.
 */
export const listHospitalDrugUnit = readHospitalDrugUnitItems;

/**
 * Gets a single known hospital drug unit item by id.
 */
export function readHospitalDrugUnitItem<
  const Query extends Directus.Query<Schema, Collections.HospitalDrugUnit>,
>(key: string | number, query?: Query) {
  return DirectusSDK.readItem<Schema, "hospital_drug_unit", Query>(
    "hospital_drug_unit",
    key,
    query,
  );
}

/**
 * Gets a single known hospital drug unit item by id.
 */
export const readHospitalDrugUnit = readHospitalDrugUnitItem;

/**
 * Read many hospital drug unit items.
 */
export function updateHospitalDrugUnitItems<
  const Query extends Directus.Query<Schema, Collections.HospitalDrugUnit[]>,
>(
  keys: string[] | number[],
  patch: Partial<Collections.HospitalDrugUnit>,
  query?: Query,
) {
  return DirectusSDK.updateItems<Schema, "hospital_drug_unit", Query>(
    "hospital_drug_unit",
    keys,
    patch,
    query,
  );
}

/**
 * Gets a single known hospital drug unit item by id.
 */
export function updateHospitalDrugUnitItem<
  const Query extends Directus.Query<Schema, Collections.HospitalDrugUnit[]>,
>(
  key: string | number,
  patch: Partial<Collections.HospitalDrugUnit>,
  query?: Query,
) {
  return DirectusSDK.updateItem<Schema, "hospital_drug_unit", Query>(
    "hospital_drug_unit",
    key,
    patch,
    query,
  );
}

/**
 * Deletes many hospital drug unit items.
 */
export function deleteHospitalDrugUnitItems<
  const Query extends Directus.Query<Schema, Collections.HospitalDrugUnit[]>,
>(keys: string[] | number[]) {
  return DirectusSDK.deleteItems<Schema, "hospital_drug_unit", Query>(
    "hospital_drug_unit",
    keys,
  );
}

/**
 * Deletes a single known hospital drug unit item by id.
 */
export function deleteHospitalDrugUnitItem(key: string | number) {
  return DirectusSDK.deleteItem<Schema, "hospital_drug_unit">(
    "hospital_drug_unit",
    key,
  );
}

export class HospitalDrugUnitItems
  implements TypedCollectionItemsWrapper<Collections.HospitalDrugUnit> {
  /**
   *
   */
  constructor(
    private client: Directus.DirectusClient<Schema> &
      Directus.RestClient<Schema>,
  ) { }

  /**
   * Creates many items in the collection.
   */
  async create<
    const Query extends DirectusSDK.Query<Schema, Collections.HospitalDrugUnit>,
  >(
    items: Partial<Collections.HospitalDrugUnit>[],
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.HospitalDrugUnit,
      Query["fields"]
    >[]
  > {
    return (await this.client.request(
      createHospitalDrugUnitItems(items, query as any),
    )) as any; // Seems like a bug in the SDK.
  }

  /**
   * Read many items from the collection.
   */
  async query<
    const Query extends Directus.Query<Schema, Collections.HospitalDrugUnit>,
  >(
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.HospitalDrugUnit,
      Query["fields"]
    >[]
  > {
    return await this.client.request(readHospitalDrugUnitItems(query));
  }

  /**
   * Read the first item from the collection matching the query.
   */
  async find<
    const Query extends Directus.Query<Schema, Collections.HospitalDrugUnit>,
  >(
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.HospitalDrugUnit,
      Query["fields"]
    >
    | undefined
  > {
    const items = await this.client.request(
      readHospitalDrugUnitItems({
        ...query,
        limit: 1,
      }),
    );
    return items?.[0] as any; // TODO: fix
  }

  /**
   * Update many items in the collection.
   */
  async update<
    const Query extends Directus.Query<Schema, Collections.HospitalDrugUnit[]>,
  >(
    keys: string[] | number[],
    patch: Partial<Collections.HospitalDrugUnit>,
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.HospitalDrugUnit,
      Query["fields"]
    >[]
  > {
    return await this.client.request(
      updateHospitalDrugUnitItems(keys, patch, query),
    );
  }

  /**
   * Remove many items in the collection.
   */
  async remove<
    const Query extends Directus.Query<Schema, Collections.HospitalDrugUnit>,
  >(keys: string[] | number[]): Promise<void> { }
}

export class HospitalDrugUnitItem
  implements TypedCollectionItemWrapper<Collections.HospitalDrugUnit> {
  /**
   *
   */
  constructor(
    private client: Directus.DirectusClient<Schema> &
      Directus.RestClient<Schema>,
  ) { }

  /**
   * Create a single item in the collection.
   */
  async create<
    const Query extends Directus.Query<Schema, Collections.HospitalDrugUnit>,
  >(
    item: Partial<Collections.HospitalDrugUnit>,
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.HospitalDrugUnit,
      Query["fields"]
    >
  > {
    return (await this.client.request(
      createHospitalDrugUnitItem(item, query as any),
    )) as any;
  }

  /**
   * Read a single item from the collection.
   */
  async get<
    const Query extends Directus.Query<Schema, Collections.HospitalDrugUnit>,
  >(
    key: string | number,
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.HospitalDrugUnit,
      Query["fields"]
    >
    | undefined
  > {
    return await this.client.request(readHospitalDrugUnitItem(key, query));
  }

  /**
   * Update a single item from the collection.
   */
  async update<
    const Query extends Directus.Query<Schema, Collections.HospitalDrugUnit>,
  >(
    key: string | number,
    patch: Partial<Collections.HospitalDrugUnit>,
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.HospitalDrugUnit,
      Query["fields"]
    >
    | undefined
  > {
    return (await this.client.request(
      updateHospitalDrugUnitItem(key, patch, query as any),
    )) as any;
  }

  /**
   * Remove many items in the collection.
   */
  async remove<
    const Query extends Directus.Query<Schema, Collections.HospitalDrugUnit>,
  >(key: string | number): Promise<void> {
    return await this.client.request(deleteHospitalDrugUnitItem(key));
  }
}

/**
 * Create many inventory bill items.
 */
export function createInventoryBillItems<
  const Query extends Directus.Query<Schema, Collections.InventoryBill[]>,
>(items: Partial<Collections.InventoryBill>[], query?: Query) {
  return DirectusSDK.createItems<Schema, "inventory_bill", Query>(
    "inventory_bill",
    items,
    query,
  );
}

/**
 * Create a single inventory bill item.
 */
export function createInventoryBillItem<
  const Query extends DirectusSDK.Query<Schema, Collections.InventoryBill[]>, // Is this a mistake? Why []?
>(item: Partial<Collections.InventoryBill>, query?: Query) {
  return DirectusSDK.createItem<Schema, "inventory_bill", Query>(
    "inventory_bill",
    item,
    query,
  );
}

/**
 * Read many inventory bill items.
 */
export function readInventoryBillItems<
  const Query extends Directus.Query<Schema, Collections.InventoryBill>,
>(query?: Query) {
  return DirectusSDK.readItems<Schema, "inventory_bill", Query>(
    "inventory_bill",
    query,
  );
}

/**
 * Read many inventory bill items.
 */
export const listInventoryBill = readInventoryBillItems;

/**
 * Gets a single known inventory bill item by id.
 */
export function readInventoryBillItem<
  const Query extends Directus.Query<Schema, Collections.InventoryBill>,
>(key: string | number, query?: Query) {
  return DirectusSDK.readItem<Schema, "inventory_bill", Query>(
    "inventory_bill",
    key,
    query,
  );
}

/**
 * Gets a single known inventory bill item by id.
 */
export const readInventoryBill = readInventoryBillItem;

/**
 * Read many inventory bill items.
 */
export function updateInventoryBillItems<
  const Query extends Directus.Query<Schema, Collections.InventoryBill[]>,
>(
  keys: string[] | number[],
  patch: Partial<Collections.InventoryBill>,
  query?: Query,
) {
  return DirectusSDK.updateItems<Schema, "inventory_bill", Query>(
    "inventory_bill",
    keys,
    patch,
    query,
  );
}

/**
 * Gets a single known inventory bill item by id.
 */
export function updateInventoryBillItem<
  const Query extends Directus.Query<Schema, Collections.InventoryBill[]>,
>(
  key: string | number,
  patch: Partial<Collections.InventoryBill>,
  query?: Query,
) {
  return DirectusSDK.updateItem<Schema, "inventory_bill", Query>(
    "inventory_bill",
    key,
    patch,
    query,
  );
}

/**
 * Deletes many inventory bill items.
 */
export function deleteInventoryBillItems<
  const Query extends Directus.Query<Schema, Collections.InventoryBill[]>,
>(keys: string[] | number[]) {
  return DirectusSDK.deleteItems<Schema, "inventory_bill", Query>(
    "inventory_bill",
    keys,
  );
}

/**
 * Deletes a single known inventory bill item by id.
 */
export function deleteInventoryBillItem(key: string | number) {
  return DirectusSDK.deleteItem<Schema, "inventory_bill">(
    "inventory_bill",
    key,
  );
}

export class InventoryBillItems
  implements TypedCollectionItemsWrapper<Collections.InventoryBill> {
  /**
   *
   */
  constructor(
    private client: Directus.DirectusClient<Schema> &
      Directus.RestClient<Schema>,
  ) { }

  /**
   * Creates many items in the collection.
   */
  async create<
    const Query extends DirectusSDK.Query<Schema, Collections.InventoryBill>,
  >(
    items: Partial<Collections.InventoryBill>[],
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.InventoryBill,
      Query["fields"]
    >[]
  > {
    return (await this.client.request(
      createInventoryBillItems(items, query as any),
    )) as any; // Seems like a bug in the SDK.
  }

  /**
   * Read many items from the collection.
   */
  async query<
    const Query extends Directus.Query<Schema, Collections.InventoryBill>,
  >(
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.InventoryBill,
      Query["fields"]
    >[]
  > {
    return await this.client.request(readInventoryBillItems(query));
  }

  /**
   * Read the first item from the collection matching the query.
   */
  async find<
    const Query extends Directus.Query<Schema, Collections.InventoryBill>,
  >(
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.InventoryBill,
      Query["fields"]
    >
    | undefined
  > {
    const items = await this.client.request(
      readInventoryBillItems({
        ...query,
        limit: 1,
      }),
    );
    return items?.[0] as any; // TODO: fix
  }

  /**
   * Update many items in the collection.
   */
  async update<
    const Query extends Directus.Query<Schema, Collections.InventoryBill[]>,
  >(
    keys: string[] | number[],
    patch: Partial<Collections.InventoryBill>,
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.InventoryBill,
      Query["fields"]
    >[]
  > {
    return await this.client.request(
      updateInventoryBillItems(keys, patch, query),
    );
  }

  /**
   * Remove many items in the collection.
   */
  async remove<
    const Query extends Directus.Query<Schema, Collections.InventoryBill>,
  >(keys: string[] | number[]): Promise<void> { }
}

export class InventoryBillItem
  implements TypedCollectionItemWrapper<Collections.InventoryBill> {
  /**
   *
   */
  constructor(
    private client: Directus.DirectusClient<Schema> &
      Directus.RestClient<Schema>,
  ) { }

  /**
   * Create a single item in the collection.
   */
  async create<
    const Query extends Directus.Query<Schema, Collections.InventoryBill>,
  >(
    item: Partial<Collections.InventoryBill>,
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.InventoryBill,
      Query["fields"]
    >
  > {
    return (await this.client.request(
      createInventoryBillItem(item, query as any),
    )) as any;
  }

  /**
   * Read a single item from the collection.
   */
  async get<
    const Query extends Directus.Query<Schema, Collections.InventoryBill>,
  >(
    key: string | number,
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.InventoryBill,
      Query["fields"]
    >
    | undefined
  > {
    return await this.client.request(readInventoryBillItem(key, query));
  }

  /**
   * Update a single item from the collection.
   */
  async update<
    const Query extends Directus.Query<Schema, Collections.InventoryBill>,
  >(
    key: string | number,
    patch: Partial<Collections.InventoryBill>,
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.InventoryBill,
      Query["fields"]
    >
    | undefined
  > {
    return (await this.client.request(
      updateInventoryBillItem(key, patch, query as any),
    )) as any;
  }

  /**
   * Remove many items in the collection.
   */
  async remove<
    const Query extends Directus.Query<Schema, Collections.InventoryBill>,
  >(key: string | number): Promise<void> {
    return await this.client.request(deleteInventoryBillItem(key));
  }
}

/**
 * Create many inventory drug items.
 */
export function createInventoryDrugItems<
  const Query extends Directus.Query<Schema, Collections.InventoryDrug[]>,
>(items: Partial<Collections.InventoryDrug>[], query?: Query) {
  return DirectusSDK.createItems<Schema, "inventory_drug", Query>(
    "inventory_drug",
    items,
    query,
  );
}

/**
 * Create a single inventory drug item.
 */
export function createInventoryDrugItem<
  const Query extends DirectusSDK.Query<Schema, Collections.InventoryDrug[]>, // Is this a mistake? Why []?
>(item: Partial<Collections.InventoryDrug>, query?: Query) {
  return DirectusSDK.createItem<Schema, "inventory_drug", Query>(
    "inventory_drug",
    item,
    query,
  );
}

/**
 * Read many inventory drug items.
 */
export function readInventoryDrugItems<
  const Query extends Directus.Query<Schema, Collections.InventoryDrug>,
>(query?: Query) {
  return DirectusSDK.readItems<Schema, "inventory_drug", Query>(
    "inventory_drug",
    query,
  );
}

/**
 * Read many inventory drug items.
 */
export const listInventoryDrug = readInventoryDrugItems;

/**
 * Gets a single known inventory drug item by id.
 */
export function readInventoryDrugItem<
  const Query extends Directus.Query<Schema, Collections.InventoryDrug>,
>(key: string | number, query?: Query) {
  return DirectusSDK.readItem<Schema, "inventory_drug", Query>(
    "inventory_drug",
    key,
    query,
  );
}

/**
 * Gets a single known inventory drug item by id.
 */
export const readInventoryDrug = readInventoryDrugItem;

/**
 * Read many inventory drug items.
 */
export function updateInventoryDrugItems<
  const Query extends Directus.Query<Schema, Collections.InventoryDrug[]>,
>(
  keys: string[] | number[],
  patch: Partial<Collections.InventoryDrug>,
  query?: Query,
) {
  return DirectusSDK.updateItems<Schema, "inventory_drug", Query>(
    "inventory_drug",
    keys,
    patch,
    query,
  );
}

/**
 * Gets a single known inventory drug item by id.
 */
export function updateInventoryDrugItem<
  const Query extends Directus.Query<Schema, Collections.InventoryDrug[]>,
>(
  key: string | number,
  patch: Partial<Collections.InventoryDrug>,
  query?: Query,
) {
  return DirectusSDK.updateItem<Schema, "inventory_drug", Query>(
    "inventory_drug",
    key,
    patch,
    query,
  );
}

/**
 * Deletes many inventory drug items.
 */
export function deleteInventoryDrugItems<
  const Query extends Directus.Query<Schema, Collections.InventoryDrug[]>,
>(keys: string[] | number[]) {
  return DirectusSDK.deleteItems<Schema, "inventory_drug", Query>(
    "inventory_drug",
    keys,
  );
}

/**
 * Deletes a single known inventory drug item by id.
 */
export function deleteInventoryDrugItem(key: string | number) {
  return DirectusSDK.deleteItem<Schema, "inventory_drug">(
    "inventory_drug",
    key,
  );
}

export class InventoryDrugItems
  implements TypedCollectionItemsWrapper<Collections.InventoryDrug> {
  /**
   *
   */
  constructor(
    private client: Directus.DirectusClient<Schema> &
      Directus.RestClient<Schema>,
  ) { }

  /**
   * Creates many items in the collection.
   */
  async create<
    const Query extends DirectusSDK.Query<Schema, Collections.InventoryDrug>,
  >(
    items: Partial<Collections.InventoryDrug>[],
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.InventoryDrug,
      Query["fields"]
    >[]
  > {
    return (await this.client.request(
      createInventoryDrugItems(items, query as any),
    )) as any; // Seems like a bug in the SDK.
  }

  /**
   * Read many items from the collection.
   */
  async query<
    const Query extends Directus.Query<Schema, Collections.InventoryDrug>,
  >(
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.InventoryDrug,
      Query["fields"]
    >[]
  > {
    return await this.client.request(readInventoryDrugItems(query));
  }

  /**
   * Read the first item from the collection matching the query.
   */
  async find<
    const Query extends Directus.Query<Schema, Collections.InventoryDrug>,
  >(
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.InventoryDrug,
      Query["fields"]
    >
    | undefined
  > {
    const items = await this.client.request(
      readInventoryDrugItems({
        ...query,
        limit: 1,
      }),
    );
    return items?.[0] as any; // TODO: fix
  }

  /**
   * Update many items in the collection.
   */
  async update<
    const Query extends Directus.Query<Schema, Collections.InventoryDrug[]>,
  >(
    keys: string[] | number[],
    patch: Partial<Collections.InventoryDrug>,
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.InventoryDrug,
      Query["fields"]
    >[]
  > {
    return await this.client.request(
      updateInventoryDrugItems(keys, patch, query),
    );
  }

  /**
   * Remove many items in the collection.
   */
  async remove<
    const Query extends Directus.Query<Schema, Collections.InventoryDrug>,
  >(keys: string[] | number[]): Promise<void> { }
}

export class InventoryDrugItem
  implements TypedCollectionItemWrapper<Collections.InventoryDrug> {
  /**
   *
   */
  constructor(
    private client: Directus.DirectusClient<Schema> &
      Directus.RestClient<Schema>,
  ) { }

  /**
   * Create a single item in the collection.
   */
  async create<
    const Query extends Directus.Query<Schema, Collections.InventoryDrug>,
  >(
    item: Partial<Collections.InventoryDrug>,
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.InventoryDrug,
      Query["fields"]
    >
  > {
    return (await this.client.request(
      createInventoryDrugItem(item, query as any),
    )) as any;
  }

  /**
   * Read a single item from the collection.
   */
  async get<
    const Query extends Directus.Query<Schema, Collections.InventoryDrug>,
  >(
    key: string | number,
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.InventoryDrug,
      Query["fields"]
    >
    | undefined
  > {
    return await this.client.request(readInventoryDrugItem(key, query));
  }

  /**
   * Update a single item from the collection.
   */
  async update<
    const Query extends Directus.Query<Schema, Collections.InventoryDrug>,
  >(
    key: string | number,
    patch: Partial<Collections.InventoryDrug>,
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.InventoryDrug,
      Query["fields"]
    >
    | undefined
  > {
    return (await this.client.request(
      updateInventoryDrugItem(key, patch, query as any),
    )) as any;
  }

  /**
   * Remove many items in the collection.
   */
  async remove<
    const Query extends Directus.Query<Schema, Collections.InventoryDrug>,
  >(key: string | number): Promise<void> {
    return await this.client.request(deleteInventoryDrugItem(key));
  }
}

/**
 * Create many inventory drug detail items.
 */
export function createInventoryDrugDetailItems<
  const Query extends Directus.Query<Schema, Collections.InventoryDrugDetail[]>,
>(items: Partial<Collections.InventoryDrugDetail>[], query?: Query) {
  return DirectusSDK.createItems<Schema, "inventory_drug_detail", Query>(
    "inventory_drug_detail",
    items,
    query,
  );
}

/**
 * Create a single inventory drug detail item.
 */
export function createInventoryDrugDetailItem<
  const Query extends DirectusSDK.Query<
    Schema,
    Collections.InventoryDrugDetail[]
  >, // Is this a mistake? Why []?
>(item: Partial<Collections.InventoryDrugDetail>, query?: Query) {
  return DirectusSDK.createItem<Schema, "inventory_drug_detail", Query>(
    "inventory_drug_detail",
    item,
    query,
  );
}

/**
 * Read many inventory drug detail items.
 */
export function readInventoryDrugDetailItems<
  const Query extends Directus.Query<Schema, Collections.InventoryDrugDetail>,
>(query?: Query) {
  return DirectusSDK.readItems<Schema, "inventory_drug_detail", Query>(
    "inventory_drug_detail",
    query,
  );
}

/**
 * Read many inventory drug detail items.
 */
export const listInventoryDrugDetail = readInventoryDrugDetailItems;

/**
 * Gets a single known inventory drug detail item by id.
 */
export function readInventoryDrugDetailItem<
  const Query extends Directus.Query<Schema, Collections.InventoryDrugDetail>,
>(key: string | number, query?: Query) {
  return DirectusSDK.readItem<Schema, "inventory_drug_detail", Query>(
    "inventory_drug_detail",
    key,
    query,
  );
}

/**
 * Gets a single known inventory drug detail item by id.
 */
export const readInventoryDrugDetail = readInventoryDrugDetailItem;

/**
 * Read many inventory drug detail items.
 */
export function updateInventoryDrugDetailItems<
  const Query extends Directus.Query<Schema, Collections.InventoryDrugDetail[]>,
>(
  keys: string[] | number[],
  patch: Partial<Collections.InventoryDrugDetail>,
  query?: Query,
) {
  return DirectusSDK.updateItems<Schema, "inventory_drug_detail", Query>(
    "inventory_drug_detail",
    keys,
    patch,
    query,
  );
}

/**
 * Gets a single known inventory drug detail item by id.
 */
export function updateInventoryDrugDetailItem<
  const Query extends Directus.Query<Schema, Collections.InventoryDrugDetail[]>,
>(
  key: string | number,
  patch: Partial<Collections.InventoryDrugDetail>,
  query?: Query,
) {
  return DirectusSDK.updateItem<Schema, "inventory_drug_detail", Query>(
    "inventory_drug_detail",
    key,
    patch,
    query,
  );
}

/**
 * Deletes many inventory drug detail items.
 */
export function deleteInventoryDrugDetailItems<
  const Query extends Directus.Query<Schema, Collections.InventoryDrugDetail[]>,
>(keys: string[] | number[]) {
  return DirectusSDK.deleteItems<Schema, "inventory_drug_detail", Query>(
    "inventory_drug_detail",
    keys,
  );
}

/**
 * Deletes a single known inventory drug detail item by id.
 */
export function deleteInventoryDrugDetailItem(key: string | number) {
  return DirectusSDK.deleteItem<Schema, "inventory_drug_detail">(
    "inventory_drug_detail",
    key,
  );
}

export class InventoryDrugDetailItems
  implements TypedCollectionItemsWrapper<Collections.InventoryDrugDetail> {
  /**
   *
   */
  constructor(
    private client: Directus.DirectusClient<Schema> &
      Directus.RestClient<Schema>,
  ) { }

  /**
   * Creates many items in the collection.
   */
  async create<
    const Query extends DirectusSDK.Query<
      Schema,
      Collections.InventoryDrugDetail
    >,
  >(
    items: Partial<Collections.InventoryDrugDetail>[],
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.InventoryDrugDetail,
      Query["fields"]
    >[]
  > {
    return (await this.client.request(
      createInventoryDrugDetailItems(items, query as any),
    )) as any; // Seems like a bug in the SDK.
  }

  /**
   * Read many items from the collection.
   */
  async query<
    const Query extends Directus.Query<Schema, Collections.InventoryDrugDetail>,
  >(
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.InventoryDrugDetail,
      Query["fields"]
    >[]
  > {
    return await this.client.request(readInventoryDrugDetailItems(query));
  }

  /**
   * Read the first item from the collection matching the query.
   */
  async find<
    const Query extends Directus.Query<Schema, Collections.InventoryDrugDetail>,
  >(
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.InventoryDrugDetail,
      Query["fields"]
    >
    | undefined
  > {
    const items = await this.client.request(
      readInventoryDrugDetailItems({
        ...query,
        limit: 1,
      }),
    );
    return items?.[0] as any; // TODO: fix
  }

  /**
   * Update many items in the collection.
   */
  async update<
    const Query extends Directus.Query<
      Schema,
      Collections.InventoryDrugDetail[]
    >,
  >(
    keys: string[] | number[],
    patch: Partial<Collections.InventoryDrugDetail>,
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.InventoryDrugDetail,
      Query["fields"]
    >[]
  > {
    return await this.client.request(
      updateInventoryDrugDetailItems(keys, patch, query),
    );
  }

  /**
   * Remove many items in the collection.
   */
  async remove<
    const Query extends Directus.Query<Schema, Collections.InventoryDrugDetail>,
  >(keys: string[] | number[]): Promise<void> { }
}

export class InventoryDrugDetailItem
  implements TypedCollectionItemWrapper<Collections.InventoryDrugDetail> {
  /**
   *
   */
  constructor(
    private client: Directus.DirectusClient<Schema> &
      Directus.RestClient<Schema>,
  ) { }

  /**
   * Create a single item in the collection.
   */
  async create<
    const Query extends Directus.Query<Schema, Collections.InventoryDrugDetail>,
  >(
    item: Partial<Collections.InventoryDrugDetail>,
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.InventoryDrugDetail,
      Query["fields"]
    >
  > {
    return (await this.client.request(
      createInventoryDrugDetailItem(item, query as any),
    )) as any;
  }

  /**
   * Read a single item from the collection.
   */
  async get<
    const Query extends Directus.Query<Schema, Collections.InventoryDrugDetail>,
  >(
    key: string | number,
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.InventoryDrugDetail,
      Query["fields"]
    >
    | undefined
  > {
    return await this.client.request(readInventoryDrugDetailItem(key, query));
  }

  /**
   * Update a single item from the collection.
   */
  async update<
    const Query extends Directus.Query<Schema, Collections.InventoryDrugDetail>,
  >(
    key: string | number,
    patch: Partial<Collections.InventoryDrugDetail>,
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.InventoryDrugDetail,
      Query["fields"]
    >
    | undefined
  > {
    return (await this.client.request(
      updateInventoryDrugDetailItem(key, patch, query as any),
    )) as any;
  }

  /**
   * Remove many items in the collection.
   */
  async remove<
    const Query extends Directus.Query<Schema, Collections.InventoryDrugDetail>,
  >(key: string | number): Promise<void> {
    return await this.client.request(deleteInventoryDrugDetailItem(key));
  }
}

/**
 * Create many inventory request items.
 */
export function createInventoryRequestItems<
  const Query extends Directus.Query<Schema, Collections.InventoryRequest[]>,
>(items: Partial<Collections.InventoryRequest>[], query?: Query) {
  return DirectusSDK.createItems<Schema, "inventory_request", Query>(
    "inventory_request",
    items,
    query,
  );
}

/**
 * Create a single inventory request item.
 */
export function createInventoryRequestItem<
  const Query extends DirectusSDK.Query<Schema, Collections.InventoryRequest[]>, // Is this a mistake? Why []?
>(item: Partial<Collections.InventoryRequest>, query?: Query) {
  return DirectusSDK.createItem<Schema, "inventory_request", Query>(
    "inventory_request",
    item,
    query,
  );
}

/**
 * Read many inventory request items.
 */
export function readInventoryRequestItems<
  const Query extends Directus.Query<Schema, Collections.InventoryRequest>,
>(query?: Query) {
  return DirectusSDK.readItems<Schema, "inventory_request", Query>(
    "inventory_request",
    query,
  );
}

/**
 * Read many inventory request items.
 */
export const listInventoryRequest = readInventoryRequestItems;

/**
 * Gets a single known inventory request item by id.
 */
export function readInventoryRequestItem<
  const Query extends Directus.Query<Schema, Collections.InventoryRequest>,
>(key: string | number, query?: Query) {
  return DirectusSDK.readItem<Schema, "inventory_request", Query>(
    "inventory_request",
    key,
    query,
  );
}

/**
 * Gets a single known inventory request item by id.
 */
export const readInventoryRequest = readInventoryRequestItem;

/**
 * Read many inventory request items.
 */
export function updateInventoryRequestItems<
  const Query extends Directus.Query<Schema, Collections.InventoryRequest[]>,
>(
  keys: string[] | number[],
  patch: Partial<Collections.InventoryRequest>,
  query?: Query,
) {
  return DirectusSDK.updateItems<Schema, "inventory_request", Query>(
    "inventory_request",
    keys,
    patch,
    query,
  );
}

/**
 * Gets a single known inventory request item by id.
 */
export function updateInventoryRequestItem<
  const Query extends Directus.Query<Schema, Collections.InventoryRequest[]>,
>(
  key: string | number,
  patch: Partial<Collections.InventoryRequest>,
  query?: Query,
) {
  return DirectusSDK.updateItem<Schema, "inventory_request", Query>(
    "inventory_request",
    key,
    patch,
    query,
  );
}

/**
 * Deletes many inventory request items.
 */
export function deleteInventoryRequestItems<
  const Query extends Directus.Query<Schema, Collections.InventoryRequest[]>,
>(keys: string[] | number[]) {
  return DirectusSDK.deleteItems<Schema, "inventory_request", Query>(
    "inventory_request",
    keys,
  );
}

/**
 * Deletes a single known inventory request item by id.
 */
export function deleteInventoryRequestItem(key: string | number) {
  return DirectusSDK.deleteItem<Schema, "inventory_request">(
    "inventory_request",
    key,
  );
}

export class InventoryRequestItems
  implements TypedCollectionItemsWrapper<Collections.InventoryRequest> {
  /**
   *
   */
  constructor(
    private client: Directus.DirectusClient<Schema> &
      Directus.RestClient<Schema>,
  ) { }

  /**
   * Creates many items in the collection.
   */
  async create<
    const Query extends DirectusSDK.Query<Schema, Collections.InventoryRequest>,
  >(
    items: Partial<Collections.InventoryRequest>[],
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.InventoryRequest,
      Query["fields"]
    >[]
  > {
    return (await this.client.request(
      createInventoryRequestItems(items, query as any),
    )) as any; // Seems like a bug in the SDK.
  }

  /**
   * Read many items from the collection.
   */
  async query<
    const Query extends Directus.Query<Schema, Collections.InventoryRequest>,
  >(
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.InventoryRequest,
      Query["fields"]
    >[]
  > {
    return await this.client.request(readInventoryRequestItems(query));
  }

  /**
   * Read the first item from the collection matching the query.
   */
  async find<
    const Query extends Directus.Query<Schema, Collections.InventoryRequest>,
  >(
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.InventoryRequest,
      Query["fields"]
    >
    | undefined
  > {
    const items = await this.client.request(
      readInventoryRequestItems({
        ...query,
        limit: 1,
      }),
    );
    return items?.[0] as any; // TODO: fix
  }

  /**
   * Update many items in the collection.
   */
  async update<
    const Query extends Directus.Query<Schema, Collections.InventoryRequest[]>,
  >(
    keys: string[] | number[],
    patch: Partial<Collections.InventoryRequest>,
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.InventoryRequest,
      Query["fields"]
    >[]
  > {
    return await this.client.request(
      updateInventoryRequestItems(keys, patch, query),
    );
  }

  /**
   * Remove many items in the collection.
   */
  async remove<
    const Query extends Directus.Query<Schema, Collections.InventoryRequest>,
  >(keys: string[] | number[]): Promise<void> { }
}

export class InventoryRequestItem
  implements TypedCollectionItemWrapper<Collections.InventoryRequest> {
  /**
   *
   */
  constructor(
    private client: Directus.DirectusClient<Schema> &
      Directus.RestClient<Schema>,
  ) { }

  /**
   * Create a single item in the collection.
   */
  async create<
    const Query extends Directus.Query<Schema, Collections.InventoryRequest>,
  >(
    item: Partial<Collections.InventoryRequest>,
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.InventoryRequest,
      Query["fields"]
    >
  > {
    return (await this.client.request(
      createInventoryRequestItem(item, query as any),
    )) as any;
  }

  /**
   * Read a single item from the collection.
   */
  async get<
    const Query extends Directus.Query<Schema, Collections.InventoryRequest>,
  >(
    key: string | number,
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.InventoryRequest,
      Query["fields"]
    >
    | undefined
  > {
    return await this.client.request(readInventoryRequestItem(key, query));
  }

  /**
   * Update a single item from the collection.
   */
  async update<
    const Query extends Directus.Query<Schema, Collections.InventoryRequest>,
  >(
    key: string | number,
    patch: Partial<Collections.InventoryRequest>,
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.InventoryRequest,
      Query["fields"]
    >
    | undefined
  > {
    return (await this.client.request(
      updateInventoryRequestItem(key, patch, query as any),
    )) as any;
  }

  /**
   * Remove many items in the collection.
   */
  async remove<
    const Query extends Directus.Query<Schema, Collections.InventoryRequest>,
  >(key: string | number): Promise<void> {
    return await this.client.request(deleteInventoryRequestItem(key));
  }
}

/**
 * Create many inventory request drug items.
 */
export function createInventoryRequestDrugItems<
  const Query extends Directus.Query<
    Schema,
    Collections.InventoryRequestDrug[]
  >,
>(items: Partial<Collections.InventoryRequestDrug>[], query?: Query) {
  return DirectusSDK.createItems<Schema, "inventory_request_drug", Query>(
    "inventory_request_drug",
    items,
    query,
  );
}

/**
 * Create a single inventory request drug item.
 */
export function createInventoryRequestDrugItem<
  const Query extends DirectusSDK.Query<
    Schema,
    Collections.InventoryRequestDrug[]
  >, // Is this a mistake? Why []?
>(item: Partial<Collections.InventoryRequestDrug>, query?: Query) {
  return DirectusSDK.createItem<Schema, "inventory_request_drug", Query>(
    "inventory_request_drug",
    item,
    query,
  );
}

/**
 * Read many inventory request drug items.
 */
export function readInventoryRequestDrugItems<
  const Query extends Directus.Query<Schema, Collections.InventoryRequestDrug>,
>(query?: Query) {
  return DirectusSDK.readItems<Schema, "inventory_request_drug", Query>(
    "inventory_request_drug",
    query,
  );
}

/**
 * Read many inventory request drug items.
 */
export const listInventoryRequestDrug = readInventoryRequestDrugItems;

/**
 * Gets a single known inventory request drug item by id.
 */
export function readInventoryRequestDrugItem<
  const Query extends Directus.Query<Schema, Collections.InventoryRequestDrug>,
>(key: string | number, query?: Query) {
  return DirectusSDK.readItem<Schema, "inventory_request_drug", Query>(
    "inventory_request_drug",
    key,
    query,
  );
}

/**
 * Gets a single known inventory request drug item by id.
 */
export const readInventoryRequestDrug = readInventoryRequestDrugItem;

/**
 * Read many inventory request drug items.
 */
export function updateInventoryRequestDrugItems<
  const Query extends Directus.Query<
    Schema,
    Collections.InventoryRequestDrug[]
  >,
>(
  keys: string[] | number[],
  patch: Partial<Collections.InventoryRequestDrug>,
  query?: Query,
) {
  return DirectusSDK.updateItems<Schema, "inventory_request_drug", Query>(
    "inventory_request_drug",
    keys,
    patch,
    query,
  );
}

/**
 * Gets a single known inventory request drug item by id.
 */
export function updateInventoryRequestDrugItem<
  const Query extends Directus.Query<
    Schema,
    Collections.InventoryRequestDrug[]
  >,
>(
  key: string | number,
  patch: Partial<Collections.InventoryRequestDrug>,
  query?: Query,
) {
  return DirectusSDK.updateItem<Schema, "inventory_request_drug", Query>(
    "inventory_request_drug",
    key,
    patch,
    query,
  );
}

/**
 * Deletes many inventory request drug items.
 */
export function deleteInventoryRequestDrugItems<
  const Query extends Directus.Query<
    Schema,
    Collections.InventoryRequestDrug[]
  >,
>(keys: string[] | number[]) {
  return DirectusSDK.deleteItems<Schema, "inventory_request_drug", Query>(
    "inventory_request_drug",
    keys,
  );
}

/**
 * Deletes a single known inventory request drug item by id.
 */
export function deleteInventoryRequestDrugItem(key: string | number) {
  return DirectusSDK.deleteItem<Schema, "inventory_request_drug">(
    "inventory_request_drug",
    key,
  );
}

export class InventoryRequestDrugItems
  implements TypedCollectionItemsWrapper<Collections.InventoryRequestDrug> {
  /**
   *
   */
  constructor(
    private client: Directus.DirectusClient<Schema> &
      Directus.RestClient<Schema>,
  ) { }

  /**
   * Creates many items in the collection.
   */
  async create<
    const Query extends DirectusSDK.Query<
      Schema,
      Collections.InventoryRequestDrug
    >,
  >(
    items: Partial<Collections.InventoryRequestDrug>[],
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.InventoryRequestDrug,
      Query["fields"]
    >[]
  > {
    return (await this.client.request(
      createInventoryRequestDrugItems(items, query as any),
    )) as any; // Seems like a bug in the SDK.
  }

  /**
   * Read many items from the collection.
   */
  async query<
    const Query extends Directus.Query<
      Schema,
      Collections.InventoryRequestDrug
    >,
  >(
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.InventoryRequestDrug,
      Query["fields"]
    >[]
  > {
    return await this.client.request(readInventoryRequestDrugItems(query));
  }

  /**
   * Read the first item from the collection matching the query.
   */
  async find<
    const Query extends Directus.Query<
      Schema,
      Collections.InventoryRequestDrug
    >,
  >(
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.InventoryRequestDrug,
      Query["fields"]
    >
    | undefined
  > {
    const items = await this.client.request(
      readInventoryRequestDrugItems({
        ...query,
        limit: 1,
      }),
    );
    return items?.[0] as any; // TODO: fix
  }

  /**
   * Update many items in the collection.
   */
  async update<
    const Query extends Directus.Query<
      Schema,
      Collections.InventoryRequestDrug[]
    >,
  >(
    keys: string[] | number[],
    patch: Partial<Collections.InventoryRequestDrug>,
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.InventoryRequestDrug,
      Query["fields"]
    >[]
  > {
    return await this.client.request(
      updateInventoryRequestDrugItems(keys, patch, query),
    );
  }

  /**
   * Remove many items in the collection.
   */
  async remove<
    const Query extends Directus.Query<
      Schema,
      Collections.InventoryRequestDrug
    >,
  >(keys: string[] | number[]): Promise<void> { }
}

export class InventoryRequestDrugItem
  implements TypedCollectionItemWrapper<Collections.InventoryRequestDrug> {
  /**
   *
   */
  constructor(
    private client: Directus.DirectusClient<Schema> &
      Directus.RestClient<Schema>,
  ) { }

  /**
   * Create a single item in the collection.
   */
  async create<
    const Query extends Directus.Query<
      Schema,
      Collections.InventoryRequestDrug
    >,
  >(
    item: Partial<Collections.InventoryRequestDrug>,
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.InventoryRequestDrug,
      Query["fields"]
    >
  > {
    return (await this.client.request(
      createInventoryRequestDrugItem(item, query as any),
    )) as any;
  }

  /**
   * Read a single item from the collection.
   */
  async get<
    const Query extends Directus.Query<
      Schema,
      Collections.InventoryRequestDrug
    >,
  >(
    key: string | number,
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.InventoryRequestDrug,
      Query["fields"]
    >
    | undefined
  > {
    return await this.client.request(readInventoryRequestDrugItem(key, query));
  }

  /**
   * Update a single item from the collection.
   */
  async update<
    const Query extends Directus.Query<
      Schema,
      Collections.InventoryRequestDrug
    >,
  >(
    key: string | number,
    patch: Partial<Collections.InventoryRequestDrug>,
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.InventoryRequestDrug,
      Query["fields"]
    >
    | undefined
  > {
    return (await this.client.request(
      updateInventoryRequestDrugItem(key, patch, query as any),
    )) as any;
  }

  /**
   * Remove many items in the collection.
   */
  async remove<
    const Query extends Directus.Query<
      Schema,
      Collections.InventoryRequestDrug
    >,
  >(key: string | number): Promise<void> {
    return await this.client.request(deleteInventoryRequestDrugItem(key));
  }
}

/**
 * Create many inventory request status items.
 */
export function createInventoryRequestStatusItems<
  const Query extends Directus.Query<
    Schema,
    Collections.InventoryRequestStatus[]
  >,
>(items: Partial<Collections.InventoryRequestStatus>[], query?: Query) {
  return DirectusSDK.createItems<Schema, "inventory_request_status", Query>(
    "inventory_request_status",
    items,
    query,
  );
}

/**
 * Create a single inventory request status item.
 */
export function createInventoryRequestStatusItem<
  const Query extends DirectusSDK.Query<
    Schema,
    Collections.InventoryRequestStatus[]
  >, // Is this a mistake? Why []?
>(item: Partial<Collections.InventoryRequestStatus>, query?: Query) {
  return DirectusSDK.createItem<Schema, "inventory_request_status", Query>(
    "inventory_request_status",
    item,
    query,
  );
}

/**
 * Read many inventory request status items.
 */
export function readInventoryRequestStatusItems<
  const Query extends Directus.Query<
    Schema,
    Collections.InventoryRequestStatus
  >,
>(query?: Query) {
  return DirectusSDK.readItems<Schema, "inventory_request_status", Query>(
    "inventory_request_status",
    query,
  );
}

/**
 * Read many inventory request status items.
 */
export const listInventoryRequestStatus = readInventoryRequestStatusItems;

/**
 * Gets a single known inventory request status item by id.
 */
export function readInventoryRequestStatusItem<
  const Query extends Directus.Query<
    Schema,
    Collections.InventoryRequestStatus
  >,
>(key: string | number, query?: Query) {
  return DirectusSDK.readItem<Schema, "inventory_request_status", Query>(
    "inventory_request_status",
    key,
    query,
  );
}

/**
 * Gets a single known inventory request status item by id.
 */
export const readInventoryRequestStatus = readInventoryRequestStatusItem;

/**
 * Read many inventory request status items.
 */
export function updateInventoryRequestStatusItems<
  const Query extends Directus.Query<
    Schema,
    Collections.InventoryRequestStatus[]
  >,
>(
  keys: string[] | number[],
  patch: Partial<Collections.InventoryRequestStatus>,
  query?: Query,
) {
  return DirectusSDK.updateItems<Schema, "inventory_request_status", Query>(
    "inventory_request_status",
    keys,
    patch,
    query,
  );
}

/**
 * Gets a single known inventory request status item by id.
 */
export function updateInventoryRequestStatusItem<
  const Query extends Directus.Query<
    Schema,
    Collections.InventoryRequestStatus[]
  >,
>(
  key: string | number,
  patch: Partial<Collections.InventoryRequestStatus>,
  query?: Query,
) {
  return DirectusSDK.updateItem<Schema, "inventory_request_status", Query>(
    "inventory_request_status",
    key,
    patch,
    query,
  );
}

/**
 * Deletes many inventory request status items.
 */
export function deleteInventoryRequestStatusItems<
  const Query extends Directus.Query<
    Schema,
    Collections.InventoryRequestStatus[]
  >,
>(keys: string[] | number[]) {
  return DirectusSDK.deleteItems<Schema, "inventory_request_status", Query>(
    "inventory_request_status",
    keys,
  );
}

/**
 * Deletes a single known inventory request status item by id.
 */
export function deleteInventoryRequestStatusItem(key: string | number) {
  return DirectusSDK.deleteItem<Schema, "inventory_request_status">(
    "inventory_request_status",
    key,
  );
}

export class InventoryRequestStatusItems
  implements TypedCollectionItemsWrapper<Collections.InventoryRequestStatus> {
  /**
   *
   */
  constructor(
    private client: Directus.DirectusClient<Schema> &
      Directus.RestClient<Schema>,
  ) { }

  /**
   * Creates many items in the collection.
   */
  async create<
    const Query extends DirectusSDK.Query<
      Schema,
      Collections.InventoryRequestStatus
    >,
  >(
    items: Partial<Collections.InventoryRequestStatus>[],
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.InventoryRequestStatus,
      Query["fields"]
    >[]
  > {
    return (await this.client.request(
      createInventoryRequestStatusItems(items, query as any),
    )) as any; // Seems like a bug in the SDK.
  }

  /**
   * Read many items from the collection.
   */
  async query<
    const Query extends Directus.Query<
      Schema,
      Collections.InventoryRequestStatus
    >,
  >(
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.InventoryRequestStatus,
      Query["fields"]
    >[]
  > {
    return await this.client.request(readInventoryRequestStatusItems(query));
  }

  /**
   * Read the first item from the collection matching the query.
   */
  async find<
    const Query extends Directus.Query<
      Schema,
      Collections.InventoryRequestStatus
    >,
  >(
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.InventoryRequestStatus,
      Query["fields"]
    >
    | undefined
  > {
    const items = await this.client.request(
      readInventoryRequestStatusItems({
        ...query,
        limit: 1,
      }),
    );
    return items?.[0] as any; // TODO: fix
  }

  /**
   * Update many items in the collection.
   */
  async update<
    const Query extends Directus.Query<
      Schema,
      Collections.InventoryRequestStatus[]
    >,
  >(
    keys: string[] | number[],
    patch: Partial<Collections.InventoryRequestStatus>,
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.InventoryRequestStatus,
      Query["fields"]
    >[]
  > {
    return await this.client.request(
      updateInventoryRequestStatusItems(keys, patch, query),
    );
  }

  /**
   * Remove many items in the collection.
   */
  async remove<
    const Query extends Directus.Query<
      Schema,
      Collections.InventoryRequestStatus
    >,
  >(keys: string[] | number[]): Promise<void> { }
}

export class InventoryRequestStatusItem
  implements TypedCollectionItemWrapper<Collections.InventoryRequestStatus> {
  /**
   *
   */
  constructor(
    private client: Directus.DirectusClient<Schema> &
      Directus.RestClient<Schema>,
  ) { }

  /**
   * Create a single item in the collection.
   */
  async create<
    const Query extends Directus.Query<
      Schema,
      Collections.InventoryRequestStatus
    >,
  >(
    item: Partial<Collections.InventoryRequestStatus>,
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.InventoryRequestStatus,
      Query["fields"]
    >
  > {
    return (await this.client.request(
      createInventoryRequestStatusItem(item, query as any),
    )) as any;
  }

  /**
   * Read a single item from the collection.
   */
  async get<
    const Query extends Directus.Query<
      Schema,
      Collections.InventoryRequestStatus
    >,
  >(
    key: string | number,
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.InventoryRequestStatus,
      Query["fields"]
    >
    | undefined
  > {
    return await this.client.request(
      readInventoryRequestStatusItem(key, query),
    );
  }

  /**
   * Update a single item from the collection.
   */
  async update<
    const Query extends Directus.Query<
      Schema,
      Collections.InventoryRequestStatus
    >,
  >(
    key: string | number,
    patch: Partial<Collections.InventoryRequestStatus>,
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.InventoryRequestStatus,
      Query["fields"]
    >
    | undefined
  > {
    return (await this.client.request(
      updateInventoryRequestStatusItem(key, patch, query as any),
    )) as any;
  }

  /**
   * Remove many items in the collection.
   */
  async remove<
    const Query extends Directus.Query<
      Schema,
      Collections.InventoryRequestStatus
    >,
  >(key: string | number): Promise<void> {
    return await this.client.request(deleteInventoryRequestStatusItem(key));
  }
}

/**
 * Create many ou items.
 */
export function createOuItems<
  const Query extends Directus.Query<Schema, Collections.Ou[]>,
>(items: Partial<Collections.Ou>[], query?: Query) {
  return DirectusSDK.createItems<Schema, "ou", Query>("ou", items, query);
}

/**
 * Create a single ou item.
 */
export function createOuItem<
  const Query extends DirectusSDK.Query<Schema, Collections.Ou[]>, // Is this a mistake? Why []?
>(item: Partial<Collections.Ou>, query?: Query) {
  return DirectusSDK.createItem<Schema, "ou", Query>("ou", item, query);
}

/**
 * Read many ou items.
 */
export function readOuItems<
  const Query extends Directus.Query<Schema, Collections.Ou>,
>(query?: Query) {
  return DirectusSDK.readItems<Schema, "ou", Query>("ou", query);
}

/**
 * Read many ou items.
 */
export const listOu = readOuItems;

/**
 * Gets a single known ou item by id.
 */
export function readOuItem<
  const Query extends Directus.Query<Schema, Collections.Ou>,
>(key: string | number, query?: Query) {
  return DirectusSDK.readItem<Schema, "ou", Query>("ou", key, query);
}

/**
 * Gets a single known ou item by id.
 */
export const readOu = readOuItem;

/**
 * Read many ou items.
 */
export function updateOuItems<
  const Query extends Directus.Query<Schema, Collections.Ou[]>,
>(keys: string[] | number[], patch: Partial<Collections.Ou>, query?: Query) {
  return DirectusSDK.updateItems<Schema, "ou", Query>("ou", keys, patch, query);
}

/**
 * Gets a single known ou item by id.
 */
export function updateOuItem<
  const Query extends Directus.Query<Schema, Collections.Ou[]>,
>(key: string | number, patch: Partial<Collections.Ou>, query?: Query) {
  return DirectusSDK.updateItem<Schema, "ou", Query>("ou", key, patch, query);
}

/**
 * Deletes many ou items.
 */
export function deleteOuItems<
  const Query extends Directus.Query<Schema, Collections.Ou[]>,
>(keys: string[] | number[]) {
  return DirectusSDK.deleteItems<Schema, "ou", Query>("ou", keys);
}

/**
 * Deletes a single known ou item by id.
 */
export function deleteOuItem(key: string | number) {
  return DirectusSDK.deleteItem<Schema, "ou">("ou", key);
}

export class OuItems implements TypedCollectionItemsWrapper<Collections.Ou> {
  /**
   *
   */
  constructor(
    private client: Directus.DirectusClient<Schema> &
      Directus.RestClient<Schema>,
  ) { }

  /**
   * Creates many items in the collection.
   */
  async create<const Query extends DirectusSDK.Query<Schema, Collections.Ou>>(
    items: Partial<Collections.Ou>[],
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<Schema, Collections.Ou, Query["fields"]>[]
  > {
    return (await this.client.request(
      createOuItems(items, query as any),
    )) as any; // Seems like a bug in the SDK.
  }

  /**
   * Read many items from the collection.
   */
  async query<const Query extends Directus.Query<Schema, Collections.Ou>>(
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<Schema, Collections.Ou, Query["fields"]>[]
  > {
    return await this.client.request(readOuItems(query));
  }

  /**
   * Read the first item from the collection matching the query.
   */
  async find<const Query extends Directus.Query<Schema, Collections.Ou>>(
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<Schema, Collections.Ou, Query["fields"]>
    | undefined
  > {
    const items = await this.client.request(
      readOuItems({
        ...query,
        limit: 1,
      }),
    );
    return items?.[0] as any; // TODO: fix
  }

  /**
   * Update many items in the collection.
   */
  async update<const Query extends Directus.Query<Schema, Collections.Ou[]>>(
    keys: string[] | number[],
    patch: Partial<Collections.Ou>,
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<Schema, Collections.Ou, Query["fields"]>[]
  > {
    return await this.client.request(updateOuItems(keys, patch, query));
  }

  /**
   * Remove many items in the collection.
   */
  async remove<const Query extends Directus.Query<Schema, Collections.Ou>>(
    keys: string[] | number[],
  ): Promise<void> { }
}

export class OuItem implements TypedCollectionItemWrapper<Collections.Ou> {
  /**
   *
   */
  constructor(
    private client: Directus.DirectusClient<Schema> &
      Directus.RestClient<Schema>,
  ) { }

  /**
   * Create a single item in the collection.
   */
  async create<const Query extends Directus.Query<Schema, Collections.Ou>>(
    item: Partial<Collections.Ou>,
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<Schema, Collections.Ou, Query["fields"]>
  > {
    return (await this.client.request(createOuItem(item, query as any))) as any;
  }

  /**
   * Read a single item from the collection.
   */
  async get<const Query extends Directus.Query<Schema, Collections.Ou>>(
    key: string | number,
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<Schema, Collections.Ou, Query["fields"]>
    | undefined
  > {
    return await this.client.request(readOuItem(key, query));
  }

  /**
   * Update a single item from the collection.
   */
  async update<const Query extends Directus.Query<Schema, Collections.Ou>>(
    key: string | number,
    patch: Partial<Collections.Ou>,
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<Schema, Collections.Ou, Query["fields"]>
    | undefined
  > {
    return (await this.client.request(
      updateOuItem(key, patch, query as any),
    )) as any;
  }

  /**
   * Remove many items in the collection.
   */
  async remove<const Query extends Directus.Query<Schema, Collections.Ou>>(
    key: string | number,
  ): Promise<void> {
    return await this.client.request(deleteOuItem(key));
  }
}

/**
 * Create many ou warehouse items.
 */
export function createOuWarehouseItems<
  const Query extends Directus.Query<Schema, Collections.OuWarehouse[]>,
>(items: Partial<Collections.OuWarehouse>[], query?: Query) {
  return DirectusSDK.createItems<Schema, "ou_warehouse", Query>(
    "ou_warehouse",
    items,
    query,
  );
}

/**
 * Create a single ou warehouse item.
 */
export function createOuWarehouseItem<
  const Query extends DirectusSDK.Query<Schema, Collections.OuWarehouse[]>, // Is this a mistake? Why []?
>(item: Partial<Collections.OuWarehouse>, query?: Query) {
  return DirectusSDK.createItem<Schema, "ou_warehouse", Query>(
    "ou_warehouse",
    item,
    query,
  );
}

/**
 * Read many ou warehouse items.
 */
export function readOuWarehouseItems<
  const Query extends Directus.Query<Schema, Collections.OuWarehouse>,
>(query?: Query) {
  return DirectusSDK.readItems<Schema, "ou_warehouse", Query>(
    "ou_warehouse",
    query,
  );
}

/**
 * Read many ou warehouse items.
 */
export const listOuWarehouse = readOuWarehouseItems;

/**
 * Gets a single known ou warehouse item by id.
 */
export function readOuWarehouseItem<
  const Query extends Directus.Query<Schema, Collections.OuWarehouse>,
>(key: string | number, query?: Query) {
  return DirectusSDK.readItem<Schema, "ou_warehouse", Query>(
    "ou_warehouse",
    key,
    query,
  );
}

/**
 * Gets a single known ou warehouse item by id.
 */
export const readOuWarehouse = readOuWarehouseItem;

/**
 * Read many ou warehouse items.
 */
export function updateOuWarehouseItems<
  const Query extends Directus.Query<Schema, Collections.OuWarehouse[]>,
>(
  keys: string[] | number[],
  patch: Partial<Collections.OuWarehouse>,
  query?: Query,
) {
  return DirectusSDK.updateItems<Schema, "ou_warehouse", Query>(
    "ou_warehouse",
    keys,
    patch,
    query,
  );
}

/**
 * Gets a single known ou warehouse item by id.
 */
export function updateOuWarehouseItem<
  const Query extends Directus.Query<Schema, Collections.OuWarehouse[]>,
>(
  key: string | number,
  patch: Partial<Collections.OuWarehouse>,
  query?: Query,
) {
  return DirectusSDK.updateItem<Schema, "ou_warehouse", Query>(
    "ou_warehouse",
    key,
    patch,
    query,
  );
}

/**
 * Deletes many ou warehouse items.
 */
export function deleteOuWarehouseItems<
  const Query extends Directus.Query<Schema, Collections.OuWarehouse[]>,
>(keys: string[] | number[]) {
  return DirectusSDK.deleteItems<Schema, "ou_warehouse", Query>(
    "ou_warehouse",
    keys,
  );
}

/**
 * Deletes a single known ou warehouse item by id.
 */
export function deleteOuWarehouseItem(key: string | number) {
  return DirectusSDK.deleteItem<Schema, "ou_warehouse">("ou_warehouse", key);
}

export class OuWarehouseItems
  implements TypedCollectionItemsWrapper<Collections.OuWarehouse> {
  /**
   *
   */
  constructor(
    private client: Directus.DirectusClient<Schema> &
      Directus.RestClient<Schema>,
  ) { }

  /**
   * Creates many items in the collection.
   */
  async create<
    const Query extends DirectusSDK.Query<Schema, Collections.OuWarehouse>,
  >(
    items: Partial<Collections.OuWarehouse>[],
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.OuWarehouse,
      Query["fields"]
    >[]
  > {
    return (await this.client.request(
      createOuWarehouseItems(items, query as any),
    )) as any; // Seems like a bug in the SDK.
  }

  /**
   * Read many items from the collection.
   */
  async query<
    const Query extends Directus.Query<Schema, Collections.OuWarehouse>,
  >(
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.OuWarehouse,
      Query["fields"]
    >[]
  > {
    return await this.client.request(readOuWarehouseItems(query));
  }

  /**
   * Read the first item from the collection matching the query.
   */
  async find<
    const Query extends Directus.Query<Schema, Collections.OuWarehouse>,
  >(
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.OuWarehouse,
      Query["fields"]
    >
    | undefined
  > {
    const items = await this.client.request(
      readOuWarehouseItems({
        ...query,
        limit: 1,
      }),
    );
    return items?.[0] as any; // TODO: fix
  }

  /**
   * Update many items in the collection.
   */
  async update<
    const Query extends Directus.Query<Schema, Collections.OuWarehouse[]>,
  >(
    keys: string[] | number[],
    patch: Partial<Collections.OuWarehouse>,
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.OuWarehouse,
      Query["fields"]
    >[]
  > {
    return await this.client.request(
      updateOuWarehouseItems(keys, patch, query),
    );
  }

  /**
   * Remove many items in the collection.
   */
  async remove<
    const Query extends Directus.Query<Schema, Collections.OuWarehouse>,
  >(keys: string[] | number[]): Promise<void> { }
}

export class OuWarehouseItem
  implements TypedCollectionItemWrapper<Collections.OuWarehouse> {
  /**
   *
   */
  constructor(
    private client: Directus.DirectusClient<Schema> &
      Directus.RestClient<Schema>,
  ) { }

  /**
   * Create a single item in the collection.
   */
  async create<
    const Query extends Directus.Query<Schema, Collections.OuWarehouse>,
  >(
    item: Partial<Collections.OuWarehouse>,
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.OuWarehouse,
      Query["fields"]
    >
  > {
    return (await this.client.request(
      createOuWarehouseItem(item, query as any),
    )) as any;
  }

  /**
   * Read a single item from the collection.
   */
  async get<
    const Query extends Directus.Query<Schema, Collections.OuWarehouse>,
  >(
    key: string | number,
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.OuWarehouse,
      Query["fields"]
    >
    | undefined
  > {
    return await this.client.request(readOuWarehouseItem(key, query));
  }

  /**
   * Update a single item from the collection.
   */
  async update<
    const Query extends Directus.Query<Schema, Collections.OuWarehouse>,
  >(
    key: string | number,
    patch: Partial<Collections.OuWarehouse>,
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.OuWarehouse,
      Query["fields"]
    >
    | undefined
  > {
    return (await this.client.request(
      updateOuWarehouseItem(key, patch, query as any),
    )) as any;
  }

  /**
   * Remove many items in the collection.
   */
  async remove<
    const Query extends Directus.Query<Schema, Collections.OuWarehouse>,
  >(key: string | number): Promise<void> {
    return await this.client.request(deleteOuWarehouseItem(key));
  }
}

/**
 * Create many unit items.
 */
export function createUnitItems<
  const Query extends Directus.Query<Schema, Collections.Unit[]>,
>(items: Partial<Collections.Unit>[], query?: Query) {
  return DirectusSDK.createItems<Schema, "unit", Query>("unit", items, query);
}

/**
 * Create a single unit item.
 */
export function createUnitItem<
  const Query extends DirectusSDK.Query<Schema, Collections.Unit[]>, // Is this a mistake? Why []?
>(item: Partial<Collections.Unit>, query?: Query) {
  return DirectusSDK.createItem<Schema, "unit", Query>("unit", item, query);
}

/**
 * Read many unit items.
 */
export function readUnitItems<
  const Query extends Directus.Query<Schema, Collections.Unit>,
>(query?: Query) {
  return DirectusSDK.readItems<Schema, "unit", Query>("unit", query);
}

/**
 * Read many unit items.
 */
export const listUnit = readUnitItems;

/**
 * Gets a single known unit item by id.
 */
export function readUnitItem<
  const Query extends Directus.Query<Schema, Collections.Unit>,
>(key: string | number, query?: Query) {
  return DirectusSDK.readItem<Schema, "unit", Query>("unit", key, query);
}

/**
 * Gets a single known unit item by id.
 */
export const readUnit = readUnitItem;

/**
 * Read many unit items.
 */
export function updateUnitItems<
  const Query extends Directus.Query<Schema, Collections.Unit[]>,
>(keys: string[] | number[], patch: Partial<Collections.Unit>, query?: Query) {
  return DirectusSDK.updateItems<Schema, "unit", Query>(
    "unit",
    keys,
    patch,
    query,
  );
}

/**
 * Gets a single known unit item by id.
 */
export function updateUnitItem<
  const Query extends Directus.Query<Schema, Collections.Unit[]>,
>(key: string | number, patch: Partial<Collections.Unit>, query?: Query) {
  return DirectusSDK.updateItem<Schema, "unit", Query>(
    "unit",
    key,
    patch,
    query,
  );
}

/**
 * Deletes many unit items.
 */
export function deleteUnitItems<
  const Query extends Directus.Query<Schema, Collections.Unit[]>,
>(keys: string[] | number[]) {
  return DirectusSDK.deleteItems<Schema, "unit", Query>("unit", keys);
}

/**
 * Deletes a single known unit item by id.
 */
export function deleteUnitItem(key: string | number) {
  return DirectusSDK.deleteItem<Schema, "unit">("unit", key);
}

export class UnitItems
  implements TypedCollectionItemsWrapper<Collections.Unit> {
  /**
   *
   */
  constructor(
    private client: Directus.DirectusClient<Schema> &
      Directus.RestClient<Schema>,
  ) { }

  /**
   * Creates many items in the collection.
   */
  async create<const Query extends DirectusSDK.Query<Schema, Collections.Unit>>(
    items: Partial<Collections.Unit>[],
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<Schema, Collections.Unit, Query["fields"]>[]
  > {
    return (await this.client.request(
      createUnitItems(items, query as any),
    )) as any; // Seems like a bug in the SDK.
  }

  /**
   * Read many items from the collection.
   */
  async query<const Query extends Directus.Query<Schema, Collections.Unit>>(
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<Schema, Collections.Unit, Query["fields"]>[]
  > {
    return await this.client.request(readUnitItems(query));
  }

  /**
   * Read the first item from the collection matching the query.
   */
  async find<const Query extends Directus.Query<Schema, Collections.Unit>>(
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<Schema, Collections.Unit, Query["fields"]>
    | undefined
  > {
    const items = await this.client.request(
      readUnitItems({
        ...query,
        limit: 1,
      }),
    );
    return items?.[0] as any; // TODO: fix
  }

  /**
   * Update many items in the collection.
   */
  async update<const Query extends Directus.Query<Schema, Collections.Unit[]>>(
    keys: string[] | number[],
    patch: Partial<Collections.Unit>,
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<Schema, Collections.Unit, Query["fields"]>[]
  > {
    return await this.client.request(updateUnitItems(keys, patch, query));
  }

  /**
   * Remove many items in the collection.
   */
  async remove<const Query extends Directus.Query<Schema, Collections.Unit>>(
    keys: string[] | number[],
  ): Promise<void> { }
}

export class UnitItem implements TypedCollectionItemWrapper<Collections.Unit> {
  /**
   *
   */
  constructor(
    private client: Directus.DirectusClient<Schema> &
      Directus.RestClient<Schema>,
  ) { }

  /**
   * Create a single item in the collection.
   */
  async create<const Query extends Directus.Query<Schema, Collections.Unit>>(
    item: Partial<Collections.Unit>,
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<Schema, Collections.Unit, Query["fields"]>
  > {
    return (await this.client.request(
      createUnitItem(item, query as any),
    )) as any;
  }

  /**
   * Read a single item from the collection.
   */
  async get<const Query extends Directus.Query<Schema, Collections.Unit>>(
    key: string | number,
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<Schema, Collections.Unit, Query["fields"]>
    | undefined
  > {
    return await this.client.request(readUnitItem(key, query));
  }

  /**
   * Update a single item from the collection.
   */
  async update<const Query extends Directus.Query<Schema, Collections.Unit>>(
    key: string | number,
    patch: Partial<Collections.Unit>,
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<Schema, Collections.Unit, Query["fields"]>
    | undefined
  > {
    return (await this.client.request(
      updateUnitItem(key, patch, query as any),
    )) as any;
  }

  /**
   * Remove many items in the collection.
   */
  async remove<const Query extends Directus.Query<Schema, Collections.Unit>>(
    key: string | number,
  ): Promise<void> {
    return await this.client.request(deleteUnitItem(key));
  }
}

/**
 * Create many unit2unit items.
 */
export function createUnit2unitItems<
  const Query extends Directus.Query<Schema, Collections.Unit2unit[]>,
>(items: Partial<Collections.Unit2unit>[], query?: Query) {
  return DirectusSDK.createItems<Schema, "unit2unit", Query>(
    "unit2unit",
    items,
    query,
  );
}

/**
 * Create a single unit2unit item.
 */
export function createUnit2unitItem<
  const Query extends DirectusSDK.Query<Schema, Collections.Unit2unit[]>, // Is this a mistake? Why []?
>(item: Partial<Collections.Unit2unit>, query?: Query) {
  return DirectusSDK.createItem<Schema, "unit2unit", Query>(
    "unit2unit",
    item,
    query,
  );
}

/**
 * Read many unit2unit items.
 */
export function readUnit2unitItems<
  const Query extends Directus.Query<Schema, Collections.Unit2unit>,
>(query?: Query) {
  return DirectusSDK.readItems<Schema, "unit2unit", Query>("unit2unit", query);
}

/**
 * Read many unit2unit items.
 */
export const listUnit2unit = readUnit2unitItems;

/**
 * Gets a single known unit2unit item by id.
 */
export function readUnit2unitItem<
  const Query extends Directus.Query<Schema, Collections.Unit2unit>,
>(key: string | number, query?: Query) {
  return DirectusSDK.readItem<Schema, "unit2unit", Query>(
    "unit2unit",
    key,
    query,
  );
}

/**
 * Gets a single known unit2unit item by id.
 */
export const readUnit2unit = readUnit2unitItem;

/**
 * Read many unit2unit items.
 */
export function updateUnit2unitItems<
  const Query extends Directus.Query<Schema, Collections.Unit2unit[]>,
>(
  keys: string[] | number[],
  patch: Partial<Collections.Unit2unit>,
  query?: Query,
) {
  return DirectusSDK.updateItems<Schema, "unit2unit", Query>(
    "unit2unit",
    keys,
    patch,
    query,
  );
}

/**
 * Gets a single known unit2unit item by id.
 */
export function updateUnit2unitItem<
  const Query extends Directus.Query<Schema, Collections.Unit2unit[]>,
>(key: string | number, patch: Partial<Collections.Unit2unit>, query?: Query) {
  return DirectusSDK.updateItem<Schema, "unit2unit", Query>(
    "unit2unit",
    key,
    patch,
    query,
  );
}

/**
 * Deletes many unit2unit items.
 */
export function deleteUnit2unitItems<
  const Query extends Directus.Query<Schema, Collections.Unit2unit[]>,
>(keys: string[] | number[]) {
  return DirectusSDK.deleteItems<Schema, "unit2unit", Query>("unit2unit", keys);
}

/**
 * Deletes a single known unit2unit item by id.
 */
export function deleteUnit2unitItem(key: string | number) {
  return DirectusSDK.deleteItem<Schema, "unit2unit">("unit2unit", key);
}

export class Unit2unitItems
  implements TypedCollectionItemsWrapper<Collections.Unit2unit> {
  /**
   *
   */
  constructor(
    private client: Directus.DirectusClient<Schema> &
      Directus.RestClient<Schema>,
  ) { }

  /**
   * Creates many items in the collection.
   */
  async create<
    const Query extends DirectusSDK.Query<Schema, Collections.Unit2unit>,
  >(
    items: Partial<Collections.Unit2unit>[],
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.Unit2unit,
      Query["fields"]
    >[]
  > {
    return (await this.client.request(
      createUnit2unitItems(items, query as any),
    )) as any; // Seems like a bug in the SDK.
  }

  /**
   * Read many items from the collection.
   */
  async query<
    const Query extends Directus.Query<Schema, Collections.Unit2unit>,
  >(
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.Unit2unit,
      Query["fields"]
    >[]
  > {
    return await this.client.request(readUnit2unitItems(query));
  }

  /**
   * Read the first item from the collection matching the query.
   */
  async find<const Query extends Directus.Query<Schema, Collections.Unit2unit>>(
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.Unit2unit,
      Query["fields"]
    >
    | undefined
  > {
    const items = await this.client.request(
      readUnit2unitItems({
        ...query,
        limit: 1,
      }),
    );
    return items?.[0] as any; // TODO: fix
  }

  /**
   * Update many items in the collection.
   */
  async update<
    const Query extends Directus.Query<Schema, Collections.Unit2unit[]>,
  >(
    keys: string[] | number[],
    patch: Partial<Collections.Unit2unit>,
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.Unit2unit,
      Query["fields"]
    >[]
  > {
    return await this.client.request(updateUnit2unitItems(keys, patch, query));
  }

  /**
   * Remove many items in the collection.
   */
  async remove<
    const Query extends Directus.Query<Schema, Collections.Unit2unit>,
  >(keys: string[] | number[]): Promise<void> { }
}

export class Unit2unitItem
  implements TypedCollectionItemWrapper<Collections.Unit2unit> {
  /**
   *
   */
  constructor(
    private client: Directus.DirectusClient<Schema> &
      Directus.RestClient<Schema>,
  ) { }

  /**
   * Create a single item in the collection.
   */
  async create<
    const Query extends Directus.Query<Schema, Collections.Unit2unit>,
  >(
    item: Partial<Collections.Unit2unit>,
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<Schema, Collections.Unit2unit, Query["fields"]>
  > {
    return (await this.client.request(
      createUnit2unitItem(item, query as any),
    )) as any;
  }

  /**
   * Read a single item from the collection.
   */
  async get<const Query extends Directus.Query<Schema, Collections.Unit2unit>>(
    key: string | number,
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.Unit2unit,
      Query["fields"]
    >
    | undefined
  > {
    return await this.client.request(readUnit2unitItem(key, query));
  }

  /**
   * Update a single item from the collection.
   */
  async update<
    const Query extends Directus.Query<Schema, Collections.Unit2unit>,
  >(
    key: string | number,
    patch: Partial<Collections.Unit2unit>,
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.Unit2unit,
      Query["fields"]
    >
    | undefined
  > {
    return (await this.client.request(
      updateUnit2unitItem(key, patch, query as any),
    )) as any;
  }

  /**
   * Remove many items in the collection.
   */
  async remove<
    const Query extends Directus.Query<Schema, Collections.Unit2unit>,
  >(key: string | number): Promise<void> {
    return await this.client.request(deleteUnit2unitItem(key));
  }
}

/**
 * Create many visitdrug items.
 */
export function createVisitdrugItems<
  const Query extends Directus.Query<Schema, Collections.Visitdrug[]>,
>(items: Partial<Collections.Visitdrug>[], query?: Query) {
  return DirectusSDK.createItems<Schema, "visitdrug", Query>(
    "visitdrug",
    items,
    query,
  );
}

/**
 * Create a single visitdrug item.
 */
export function createVisitdrugItem<
  const Query extends DirectusSDK.Query<Schema, Collections.Visitdrug[]>, // Is this a mistake? Why []?
>(item: Partial<Collections.Visitdrug>, query?: Query) {
  return DirectusSDK.createItem<Schema, "visitdrug", Query>(
    "visitdrug",
    item,
    query,
  );
}

/**
 * Read many visitdrug items.
 */
export function readVisitdrugItems<
  const Query extends Directus.Query<Schema, Collections.Visitdrug>,
>(query?: Query) {
  return DirectusSDK.readItems<Schema, "visitdrug", Query>("visitdrug", query);
}

/**
 * Read many visitdrug items.
 */
export const listVisitdrug = readVisitdrugItems;

/**
 * Gets a single known visitdrug item by id.
 */
export function readVisitdrugItem<
  const Query extends Directus.Query<Schema, Collections.Visitdrug>,
>(key: string | number, query?: Query) {
  return DirectusSDK.readItem<Schema, "visitdrug", Query>(
    "visitdrug",
    key,
    query,
  );
}

/**
 * Gets a single known visitdrug item by id.
 */
export const readVisitdrug = readVisitdrugItem;

/**
 * Read many visitdrug items.
 */
export function updateVisitdrugItems<
  const Query extends Directus.Query<Schema, Collections.Visitdrug[]>,
>(
  keys: string[] | number[],
  patch: Partial<Collections.Visitdrug>,
  query?: Query,
) {
  return DirectusSDK.updateItems<Schema, "visitdrug", Query>(
    "visitdrug",
    keys,
    patch,
    query,
  );
}

/**
 * Gets a single known visitdrug item by id.
 */
export function updateVisitdrugItem<
  const Query extends Directus.Query<Schema, Collections.Visitdrug[]>,
>(key: string | number, patch: Partial<Collections.Visitdrug>, query?: Query) {
  return DirectusSDK.updateItem<Schema, "visitdrug", Query>(
    "visitdrug",
    key,
    patch,
    query,
  );
}

/**
 * Deletes many visitdrug items.
 */
export function deleteVisitdrugItems<
  const Query extends Directus.Query<Schema, Collections.Visitdrug[]>,
>(keys: string[] | number[]) {
  return DirectusSDK.deleteItems<Schema, "visitdrug", Query>("visitdrug", keys);
}

/**
 * Deletes a single known visitdrug item by id.
 */
export function deleteVisitdrugItem(key: string | number) {
  return DirectusSDK.deleteItem<Schema, "visitdrug">("visitdrug", key);
}

export class VisitdrugItems
  implements TypedCollectionItemsWrapper<Collections.Visitdrug> {
  /**
   *
   */
  constructor(
    private client: Directus.DirectusClient<Schema> &
      Directus.RestClient<Schema>,
  ) { }

  /**
   * Creates many items in the collection.
   */
  async create<
    const Query extends DirectusSDK.Query<Schema, Collections.Visitdrug>,
  >(
    items: Partial<Collections.Visitdrug>[],
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.Visitdrug,
      Query["fields"]
    >[]
  > {
    return (await this.client.request(
      createVisitdrugItems(items, query as any),
    )) as any; // Seems like a bug in the SDK.
  }

  /**
   * Read many items from the collection.
   */
  async query<
    const Query extends Directus.Query<Schema, Collections.Visitdrug>,
  >(
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.Visitdrug,
      Query["fields"]
    >[]
  > {
    return await this.client.request(readVisitdrugItems(query));
  }

  /**
   * Read the first item from the collection matching the query.
   */
  async find<const Query extends Directus.Query<Schema, Collections.Visitdrug>>(
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.Visitdrug,
      Query["fields"]
    >
    | undefined
  > {
    const items = await this.client.request(
      readVisitdrugItems({
        ...query,
        limit: 1,
      }),
    );
    return items?.[0] as any; // TODO: fix
  }

  /**
   * Update many items in the collection.
   */
  async update<
    const Query extends Directus.Query<Schema, Collections.Visitdrug[]>,
  >(
    keys: string[] | number[],
    patch: Partial<Collections.Visitdrug>,
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.Visitdrug,
      Query["fields"]
    >[]
  > {
    return await this.client.request(updateVisitdrugItems(keys, patch, query));
  }

  /**
   * Remove many items in the collection.
   */
  async remove<
    const Query extends Directus.Query<Schema, Collections.Visitdrug>,
  >(keys: string[] | number[]): Promise<void> { }
}

export class VisitdrugItem
  implements TypedCollectionItemWrapper<Collections.Visitdrug> {
  /**
   *
   */
  constructor(
    private client: Directus.DirectusClient<Schema> &
      Directus.RestClient<Schema>,
  ) { }

  /**
   * Create a single item in the collection.
   */
  async create<
    const Query extends Directus.Query<Schema, Collections.Visitdrug>,
  >(
    item: Partial<Collections.Visitdrug>,
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<Schema, Collections.Visitdrug, Query["fields"]>
  > {
    return (await this.client.request(
      createVisitdrugItem(item, query as any),
    )) as any;
  }

  /**
   * Read a single item from the collection.
   */
  async get<const Query extends Directus.Query<Schema, Collections.Visitdrug>>(
    key: string | number,
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.Visitdrug,
      Query["fields"]
    >
    | undefined
  > {
    return await this.client.request(readVisitdrugItem(key, query));
  }

  /**
   * Update a single item from the collection.
   */
  async update<
    const Query extends Directus.Query<Schema, Collections.Visitdrug>,
  >(
    key: string | number,
    patch: Partial<Collections.Visitdrug>,
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.Visitdrug,
      Query["fields"]
    >
    | undefined
  > {
    return (await this.client.request(
      updateVisitdrugItem(key, patch, query as any),
    )) as any;
  }

  /**
   * Remove many items in the collection.
   */
  async remove<
    const Query extends Directus.Query<Schema, Collections.Visitdrug>,
  >(key: string | number): Promise<void> {
    return await this.client.request(deleteVisitdrugItem(key));
  }
}

/**
 * Create many warehouse items.
 */
export function createWarehouseItems<
  const Query extends Directus.Query<Schema, Collections.Warehouse[]>,
>(items: Partial<Collections.Warehouse>[], query?: Query) {
  return DirectusSDK.createItems<Schema, "warehouse", Query>(
    "warehouse",
    items,
    query,
  );
}

/**
 * Create a single warehouse item.
 */
export function createWarehouseItem<
  const Query extends DirectusSDK.Query<Schema, Collections.Warehouse[]>, // Is this a mistake? Why []?
>(item: Partial<Collections.Warehouse>, query?: Query) {
  return DirectusSDK.createItem<Schema, "warehouse", Query>(
    "warehouse",
    item,
    query,
  );
}

/**
 * Read many warehouse items.
 */
export function readWarehouseItems<
  const Query extends Directus.Query<Schema, Collections.Warehouse>,
>(query?: Query) {
  return DirectusSDK.readItems<Schema, "warehouse", Query>("warehouse", query);
}

/**
 * Read many warehouse items.
 */
export const listWarehouse = readWarehouseItems;

/**
 * Gets a single known warehouse item by id.
 */
export function readWarehouseItem<
  const Query extends Directus.Query<Schema, Collections.Warehouse>,
>(key: string | number, query?: Query) {
  return DirectusSDK.readItem<Schema, "warehouse", Query>(
    "warehouse",
    key,
    query,
  );
}

/**
 * Gets a single known warehouse item by id.
 */
export const readWarehouse = readWarehouseItem;

/**
 * Read many warehouse items.
 */
export function updateWarehouseItems<
  const Query extends Directus.Query<Schema, Collections.Warehouse[]>,
>(
  keys: string[] | number[],
  patch: Partial<Collections.Warehouse>,
  query?: Query,
) {
  return DirectusSDK.updateItems<Schema, "warehouse", Query>(
    "warehouse",
    keys,
    patch,
    query,
  );
}

/**
 * Gets a single known warehouse item by id.
 */
export function updateWarehouseItem<
  const Query extends Directus.Query<Schema, Collections.Warehouse[]>,
>(key: string | number, patch: Partial<Collections.Warehouse>, query?: Query) {
  return DirectusSDK.updateItem<Schema, "warehouse", Query>(
    "warehouse",
    key,
    patch,
    query,
  );
}

/**
 * Deletes many warehouse items.
 */
export function deleteWarehouseItems<
  const Query extends Directus.Query<Schema, Collections.Warehouse[]>,
>(keys: string[] | number[]) {
  return DirectusSDK.deleteItems<Schema, "warehouse", Query>("warehouse", keys);
}

/**
 * Deletes a single known warehouse item by id.
 */
export function deleteWarehouseItem(key: string | number) {
  return DirectusSDK.deleteItem<Schema, "warehouse">("warehouse", key);
}

export class WarehouseItems
  implements TypedCollectionItemsWrapper<Collections.Warehouse> {
  /**
   *
   */
  constructor(
    private client: Directus.DirectusClient<Schema> &
      Directus.RestClient<Schema>,
  ) { }

  /**
   * Creates many items in the collection.
   */
  async create<
    const Query extends DirectusSDK.Query<Schema, Collections.Warehouse>,
  >(
    items: Partial<Collections.Warehouse>[],
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.Warehouse,
      Query["fields"]
    >[]
  > {
    return (await this.client.request(
      createWarehouseItems(items, query as any),
    )) as any; // Seems like a bug in the SDK.
  }

  /**
   * Read many items from the collection.
   */
  async query<
    const Query extends Directus.Query<Schema, Collections.Warehouse>,
  >(
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.Warehouse,
      Query["fields"]
    >[]
  > {
    return await this.client.request(readWarehouseItems(query));
  }

  /**
   * Read the first item from the collection matching the query.
   */
  async find<const Query extends Directus.Query<Schema, Collections.Warehouse>>(
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.Warehouse,
      Query["fields"]
    >
    | undefined
  > {
    const items = await this.client.request(
      readWarehouseItems({
        ...query,
        limit: 1,
      }),
    );
    return items?.[0] as any; // TODO: fix
  }

  /**
   * Update many items in the collection.
   */
  async update<
    const Query extends Directus.Query<Schema, Collections.Warehouse[]>,
  >(
    keys: string[] | number[],
    patch: Partial<Collections.Warehouse>,
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.Warehouse,
      Query["fields"]
    >[]
  > {
    return await this.client.request(updateWarehouseItems(keys, patch, query));
  }

  /**
   * Remove many items in the collection.
   */
  async remove<
    const Query extends Directus.Query<Schema, Collections.Warehouse>,
  >(keys: string[] | number[]): Promise<void> { }
}

export class WarehouseItem
  implements TypedCollectionItemWrapper<Collections.Warehouse> {
  /**
   *
   */
  constructor(
    private client: Directus.DirectusClient<Schema> &
      Directus.RestClient<Schema>,
  ) { }

  /**
   * Create a single item in the collection.
   */
  async create<
    const Query extends Directus.Query<Schema, Collections.Warehouse>,
  >(
    item: Partial<Collections.Warehouse>,
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<Schema, Collections.Warehouse, Query["fields"]>
  > {
    return (await this.client.request(
      createWarehouseItem(item, query as any),
    )) as any;
  }

  /**
   * Read a single item from the collection.
   */
  async get<const Query extends Directus.Query<Schema, Collections.Warehouse>>(
    key: string | number,
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.Warehouse,
      Query["fields"]
    >
    | undefined
  > {
    return await this.client.request(readWarehouseItem(key, query));
  }

  /**
   * Update a single item from the collection.
   */
  async update<
    const Query extends Directus.Query<Schema, Collections.Warehouse>,
  >(
    key: string | number,
    patch: Partial<Collections.Warehouse>,
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.Warehouse,
      Query["fields"]
    >
    | undefined
  > {
    return (await this.client.request(
      updateWarehouseItem(key, patch, query as any),
    )) as any;
  }

  /**
   * Remove many items in the collection.
   */
  async remove<
    const Query extends Directus.Query<Schema, Collections.Warehouse>,
  >(key: string | number): Promise<void> {
    return await this.client.request(deleteWarehouseItem(key));
  }
}

/**
 * The Directus Client.
 */

export type DirectusRestCommands<T extends Record<any, any>> = keyof {
  [K in keyof T as T[K] extends (
    ...any: any[]
  ) => Directus.RestCommand<any, any>
  ? K
  : never]: K;
};

export type TypedClient = {
  /**
   * Manages multiple items from the BillStatus collection.
   */
  bill_statuses: TypedCollectionItemsWrapper<Collections.BillStatus>;

  /**
   * Manages individual items from the BillStatus collection.
   */
  bill_status: TypedCollectionItemWrapper<Collections.BillStatus>;

  /**
   * Manages multiple items from the Cdrug collection.
   */
  cdrugs: TypedCollectionItemsWrapper<Collections.Cdrug>;

  /**
   * Manages individual items from the Cdrug collection.
   */
  cdrug: TypedCollectionItemWrapper<Collections.Cdrug>;

  /**
   * Manages multiple items from the HospitalDrug collection.
   */
  hospital_drugs: TypedCollectionItemsWrapper<Collections.HospitalDrug>;

  /**
   * Manages individual items from the HospitalDrug collection.
   */
  hospital_drug: TypedCollectionItemWrapper<Collections.HospitalDrug>;

  /**
   * Manages multiple items from the HospitalDrugOu collection.
   */
  hospital_drug_ous: TypedCollectionItemsWrapper<Collections.HospitalDrugOu>;

  /**
   * Manages individual items from the HospitalDrugOu collection.
   */
  hospital_drug_ou: TypedCollectionItemWrapper<Collections.HospitalDrugOu>;

  /**
   * Manages multiple items from the HospitalDrugRate collection.
   */
  hospital_drug_rates: TypedCollectionItemsWrapper<Collections.HospitalDrugRate>;

  /**
   * Manages individual items from the HospitalDrugRate collection.
   */
  hospital_drug_rate: TypedCollectionItemWrapper<Collections.HospitalDrugRate>;

  /**
   * Manages multiple items from the HospitalDrugUnit collection.
   */
  hospital_drug_units: TypedCollectionItemsWrapper<Collections.HospitalDrugUnit>;

  /**
   * Manages individual items from the HospitalDrugUnit collection.
   */
  hospital_drug_unit: TypedCollectionItemWrapper<Collections.HospitalDrugUnit>;

  /**
   * Manages multiple items from the InventoryBill collection.
   */
  inventory_bills: TypedCollectionItemsWrapper<Collections.InventoryBill>;

  /**
   * Manages individual items from the InventoryBill collection.
   */
  inventory_bill: TypedCollectionItemWrapper<Collections.InventoryBill>;

  /**
   * Manages multiple items from the InventoryDrug collection.
   */
  inventory_drugs: TypedCollectionItemsWrapper<Collections.InventoryDrug>;

  /**
   * Manages individual items from the InventoryDrug collection.
   */
  inventory_drug: TypedCollectionItemWrapper<Collections.InventoryDrug>;

  /**
   * Manages multiple items from the InventoryDrugDetail collection.
   */
  inventory_drug_details: TypedCollectionItemsWrapper<Collections.InventoryDrugDetail>;

  /**
   * Manages individual items from the InventoryDrugDetail collection.
   */
  inventory_drug_detail: TypedCollectionItemWrapper<Collections.InventoryDrugDetail>;

  /**
   * Manages multiple items from the InventoryRequest collection.
   */
  inventory_requests: TypedCollectionItemsWrapper<Collections.InventoryRequest>;

  /**
   * Manages individual items from the InventoryRequest collection.
   */
  inventory_request: TypedCollectionItemWrapper<Collections.InventoryRequest>;

  /**
   * Manages multiple items from the InventoryRequestDrug collection.
   */
  inventory_request_drugs: TypedCollectionItemsWrapper<Collections.InventoryRequestDrug>;

  /**
   * Manages individual items from the InventoryRequestDrug collection.
   */
  inventory_request_drug: TypedCollectionItemWrapper<Collections.InventoryRequestDrug>;

  /**
   * Manages multiple items from the InventoryRequestStatus collection.
   */
  inventory_request_statuses: TypedCollectionItemsWrapper<Collections.InventoryRequestStatus>;

  /**
   * Manages individual items from the InventoryRequestStatus collection.
   */
  inventory_request_status: TypedCollectionItemWrapper<Collections.InventoryRequestStatus>;

  /**
   * Manages multiple items from the Ou collection.
   */
  ous: TypedCollectionItemsWrapper<Collections.Ou>;

  /**
   * Manages individual items from the Ou collection.
   */
  ou: TypedCollectionItemWrapper<Collections.Ou>;

  /**
   * Manages multiple items from the OuWarehouse collection.
   */
  ou_warehouses: TypedCollectionItemsWrapper<Collections.OuWarehouse>;

  /**
   * Manages individual items from the OuWarehouse collection.
   */
  ou_warehouse: TypedCollectionItemWrapper<Collections.OuWarehouse>;

  /**
   * Manages multiple items from the Unit collection.
   */
  units: TypedCollectionItemsWrapper<Collections.Unit>;

  /**
   * Manages individual items from the Unit collection.
   */
  unit: TypedCollectionItemWrapper<Collections.Unit>;

  /**
   * Manages multiple items from the Unit2unit collection.
   */
  unit2units: TypedCollectionItemsWrapper<Collections.Unit2unit>;

  /**
   * Manages individual items from the Unit2unit collection.
   */
  unit2unit: TypedCollectionItemWrapper<Collections.Unit2unit>;

  /**
   * Manages multiple items from the Visitdrug collection.
   */
  visitdrugs: TypedCollectionItemsWrapper<Collections.Visitdrug>;

  /**
   * Manages individual items from the Visitdrug collection.
   */
  visitdrug: TypedCollectionItemWrapper<Collections.Visitdrug>;

  /**
   * Manages multiple items from the Warehouse collection.
   */
  warehouses: TypedCollectionItemsWrapper<Collections.Warehouse>;

  /**
   * Manages individual items from the Warehouse collection.
   */
  warehouse: TypedCollectionItemWrapper<Collections.Warehouse>;
} & DirectusCommands;

type ExcludedDirectusCommands = "withOptions" | "withToken" | "withSearch";

/**
 * This is almost a sanity check for protecting against breaking changes in the SDK.
 * If this is erroring for you, the SDK probably changed and there's an update needed.
 */

const excludedDirectusCommands: {
  [K in keyof Omit<
    DirectusSDK,
    Exclude<keyof DirectusCommands, ExcludedDirectusCommands>
  >]: true;
} = {
  ["auth"]: true,
  ["authentication"]: true,
  ["createDirectus"]: true,
  ["rest"]: true,
  ["formatFields"]: true,
  ["generateUid"]: true,
  ["getAuthEndpoint"]: true,
  ["graphql"]: true,
  ["memoryStorage"]: true,
  ["messageCallback"]: true,
  ["pong"]: true,
  ["queryToParams"]: true,
  ["realtime"]: true,
  ["sleep"]: true,
  ["staticToken"]: true,
  ["throwIfCoreCollection"]: true,
  ["throwIfEmpty"]: true,
  ["withOptions"]: true,
  ["withToken"]: true,
  ["withSearch"]: true,
} as const;

type _InjectSchemaSystemTypes<T, Schema> =
  T extends Directus.Query<any, infer C>
  ? Directus.Query<Schema, C>
  : T extends Directus.DirectusActivity<any>
  ? Directus.DirectusActivity<Schema>
  : T extends Directus.DirectusCollection<any>
  ? Directus.DirectusCollection<Schema>
  : T extends Directus.DirectusComment<any>
  ? Directus.DirectusComment<Schema>
  : T extends Directus.DirectusField<any>
  ? Directus.DirectusField<Schema>
  : T extends Directus.DirectusFile<any>
  ? Directus.DirectusFile<Schema>
  : T extends Directus.DirectusFolder<any>
  ? Directus.DirectusFolder<Schema>
  : T extends Directus.DirectusPermission<any>
  ? Directus.DirectusPermission<Schema>
  : T extends Directus.DirectusPreset<any>
  ? Directus.DirectusPreset<Schema>
  : T extends Directus.DirectusRelation<any>
  ? Directus.DirectusRelation<Schema>
  : T extends Directus.DirectusRevision<any>
  ? Directus.DirectusRevision<Schema>
  : T extends Directus.DirectusRole<any>
  ? Directus.DirectusRole<Schema>
  : T extends Directus.DirectusSettings<any>
  ? Directus.DirectusSettings<Schema>
  : T extends Directus.DirectusUser<any>
  ? Directus.DirectusUser<Schema>
  : T extends Directus.DirectusWebhook<any>
  ? Directus.DirectusWebhook<Schema>
  : T extends Directus.DirectusDashboard<any>
  ? Directus.DirectusDashboard<Schema>
  : T extends Directus.DirectusPanel<any>
  ? Directus.DirectusPanel<Schema>
  : T extends Directus.DirectusNotification<any>
  ? Directus.DirectusNotification<Schema>
  : T extends Directus.DirectusShare<any>
  ? Directus.DirectusShare<Schema>
  : T extends Directus.DirectusFlow<any>
  ? Directus.DirectusFlow<Schema>
  : T extends Directus.DirectusOperation<any>
  ? Directus.DirectusOperation<Schema>
  : T extends Directus.DirectusTranslation<any>
  ? Directus.DirectusTranslation<Schema>
  : T extends Directus.DirectusVersion<any>
  ? Directus.DirectusVersion<Schema>
  : T extends Directus.DirectusExtension<any>
  ? Directus.DirectusExtension<Schema>
  : T extends Directus.DirectusUser<any>
  ? Directus.DirectusUser<Schema>
  : T;

type InjectSchemaSystemTypes<T, Schema> =
  T extends Partial<infer Nested>
  ? Partial<_InjectSchemaSystemTypes<Nested, Schema>>
  : _InjectSchemaSystemTypes<T, Schema>;

type InjectSchema<T, Schema> = T extends []
  ? []
  : T extends [infer Param]
  ? [InjectSchema<Param, Schema>]
  : T extends [infer Param, ...infer Rest]
  ? [InjectSchema<Param, Schema>, ...InjectSchema<Rest, Schema>]
  : InjectSchemaSystemTypes<T, Schema>;

export type DirectusCommands = {
  [K in DirectusRestCommands<DirectusSDK>]: (
    ...args: InjectSchema<Parameters<DirectusSDK[K]>, Schema>
  ) => Promise<
    ReturnType<DirectusSDK[K]> extends Directus.RestCommand<infer Output, any>
    ? Output
    : unknown
  >;
};

function isDirectusRestCommand(
  pair: [any, any],
): pair is [string, (...args: any[]) => Directus.RestCommand<any, any>] {
  return (
    !((pair?.[0] as any) in excludedDirectusCommands) &&
    typeof pair?.[1] === "function"
  );
}

function isDirectusRestClient<Schema>(
  client: DirectusSDK.DirectusClient<Schema>,
): client is DirectusSDK.DirectusClient<Schema> &
DirectusSDK.RestClient<Schema> {
  return client && "request" in client;
}

export const schema = () => {
  return <Schema,>(client: Directus.DirectusClient<Schema>): TypedClient => {
    if (!isDirectusRestClient(client)) {
      throw new Error("Directus client must have the REST plugin enabled.");
    }

    return Object.fromEntries([
      ...Object.entries(DirectusSDK)
        .filter(isDirectusRestCommand)
        .map(([key, value]) => {
          return [
            key,
            (...args: any[]): any => {
              return client.request(value(...args));
            },
          ];
        }),

      ["bill_statuses", new BillStatusItems(client as any)],
      ["bill_status", new BillStatusItem(client as any)],

      ["cdrugs", new CdrugItems(client as any)],
      ["cdrug", new CdrugItem(client as any)],

      ["hospital_drugs", new HospitalDrugItems(client as any)],
      ["hospital_drug", new HospitalDrugItem(client as any)],

      ["hospital_drug_ous", new HospitalDrugOuItems(client as any)],
      ["hospital_drug_ou", new HospitalDrugOuItem(client as any)],

      ["hospital_drug_rates", new HospitalDrugRateItems(client as any)],
      ["hospital_drug_rate", new HospitalDrugRateItem(client as any)],

      ["hospital_drug_units", new HospitalDrugUnitItems(client as any)],
      ["hospital_drug_unit", new HospitalDrugUnitItem(client as any)],

      ["inventory_bills", new InventoryBillItems(client as any)],
      ["inventory_bill", new InventoryBillItem(client as any)],

      ["inventory_drugs", new InventoryDrugItems(client as any)],
      ["inventory_drug", new InventoryDrugItem(client as any)],

      ["inventory_drug_details", new InventoryDrugDetailItems(client as any)],
      ["inventory_drug_detail", new InventoryDrugDetailItem(client as any)],

      ["inventory_requests", new InventoryRequestItems(client as any)],
      ["inventory_request", new InventoryRequestItem(client as any)],

      ["inventory_request_drugs", new InventoryRequestDrugItems(client as any)],
      ["inventory_request_drug", new InventoryRequestDrugItem(client as any)],

      [
        "inventory_request_statuses",
        new InventoryRequestStatusItems(client as any),
      ],
      [
        "inventory_request_status",
        new InventoryRequestStatusItem(client as any),
      ],

      ["ous", new OuItems(client as any)],
      ["ou", new OuItem(client as any)],

      ["ou_warehouses", new OuWarehouseItems(client as any)],
      ["ou_warehouse", new OuWarehouseItem(client as any)],

      ["units", new UnitItems(client as any)],
      ["unit", new UnitItem(client as any)],

      ["unit2units", new Unit2unitItems(client as any)],
      ["unit2unit", new Unit2unitItem(client as any)],

      ["visitdrugs", new VisitdrugItems(client as any)],
      ["visitdrug", new VisitdrugItem(client as any)],

      ["warehouses", new WarehouseItems(client as any)],
      ["warehouse", new WarehouseItem(client as any)],
    ]);
  };
};

export interface BindableClient {
  with: <
    Client extends DirectusSDK.DirectusClient<any>,
    Extension extends object,
  >(
    createExtension: (client: Client) => Extension,
  ) => this & Extension;
}

export const bindings = () => {
  return <Schema, Client extends DirectusSDK.DirectusClient<Schema>>(
    client: Client,
  ): BindableClient => {
    return {
      with(createExtension: any) {
        const extension = createExtension(this);
        const extensions = Object.entries(
          extension,
        ).reduce<PropertyDescriptorMap>((properties, [name, value]) => {
          return {
            ...properties,
            [name]: {
              value,
              configurable: true,
              writable: true,
              enumerable: true,
            },
          };
        }, {});

        Object.defineProperties(this, extensions);

        return this;
      },
    } as any;
  };
};

export function createDirectusWithTypes(
  url: string,
): Directus.DirectusClient<Schema> & Directus.RestClient<Schema> & TypedClient {
  return DirectusSDK.createDirectus<Schema>(url)
    .with(bindings())
    .with(DirectusSDK.rest())
    .with(schema());
}

export const createTypedClient = createDirectusWithTypes;
